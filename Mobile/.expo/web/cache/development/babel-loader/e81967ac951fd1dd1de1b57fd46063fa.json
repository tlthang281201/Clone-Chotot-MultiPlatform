{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"inputProps\", \"combinedProps\", \"children\", \"wrapperRef\", \"isHovered\", \"isFocusVisible\"],\n  _excluded2 = [\"_interactionBox\", \"_icon\", \"_stack\", \"_text\"],\n  _excluded3 = [\"icon\", \"children\", \"wrapperRef\", \"isHovered\", \"isFocusVisible\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../Box\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nimport { mergeRefs } from \"./../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from \"./RadioGroup\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from \"../Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps, isEmptyObj } from \"../../../utils\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nvar RadioComponent = memo(forwardRef(function (_ref2, ref) {\n  var icon = _ref2.icon,\n    inputProps = _ref2.inputProps,\n    combinedProps = _ref2.combinedProps,\n    children = _ref2.children,\n    wrapperRef = _ref2.wrapperRef,\n    isHoveredProp = _ref2.isHovered,\n    isFocusVisibleProp = _ref2.isFocusVisible,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var isInvalid = combinedProps.isInvalid,\n    isReadOnly = combinedProps.isReadOnly,\n    isIndeterminate = combinedProps.isIndeterminate;\n  var isDisabled = inputProps.disabled,\n    isChecked = inputProps.checked;\n  var _ref = React.useRef(null);\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  var mergedRefs = mergeRefs([_ref, wrapperRef]);\n  var _useFocusRing = useFocusRing(),\n    focusProps = _useFocusRing.focusProps,\n    isFocusVisible = _useFocusRing.isFocusVisible;\n  var _usePropsResolution = usePropsResolution('Radio', combinedProps, {\n      isInvalid: isInvalid,\n      isReadOnly: isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled: isDisabled,\n      isIndeterminate: isIndeterminate,\n      isChecked: isChecked,\n      isHovered: isHoveredProp || isHovered\n    }),\n    _interactionBox = _usePropsResolution._interactionBox,\n    _icon = _usePropsResolution._icon,\n    _stack = _usePropsResolution._stack,\n    _text = _usePropsResolution._text,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var sizedIcon = function sizedIcon() {\n    return (\n      React.cloneElement(icon, _objectSpread({}, _icon))\n    );\n  };\n  var component = React.createElement(Stack, _stack, React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref\n  }))), component);\n}));\nvar Radio = function Radio(_ref3, ref) {\n  var icon = _ref3.icon,\n    children = _ref3.children,\n    wrapperRef = _ref3.wrapperRef,\n    isHoveredProp = _ref3.isHovered,\n    isFocusVisibleProp = _ref3.isFocusVisible,\n    props = _objectWithoutProperties(_ref3, _excluded3);\n  var _contextState$state;\n  var formControlContext = useFormControlContext();\n  var contextState = React.useContext(RadioContext);\n  var combinedProps = combineContextAndProps(_objectSpread(_objectSpread({}, formControlContext), contextState), props);\n  var inputRef = React.useRef(null);\n  var radioState = useRadio(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': props.accessibilityLabel,\n    children: children\n  }), (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef);\n\n  var inputProps = React.useMemo(function () {\n    return radioState.inputProps;\n  }, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n  var _React$useState = React.useState(_objectSpread({}, combinedProps)),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    contextCombinedProps = _React$useState2[0];\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return React.createElement(React.Fragment, null);\n  }\n  return React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\nexport default memo(forwardRef(Radio));","map":{"version":3,"sources":["Radio.web.tsx"],"names":["React","memo","forwardRef","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","icon","inputProps","combinedProps","children","wrapperRef","isHovered","isHoveredProp","isFocusVisible","isFocusVisibleProp","props","ref","isInvalid","isReadOnly","isIndeterminate","disabled","isDisabled","checked","isChecked","_ref","useRef","mergedRefs","focusProps","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","contextCombinedProps","useState","console","error"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}