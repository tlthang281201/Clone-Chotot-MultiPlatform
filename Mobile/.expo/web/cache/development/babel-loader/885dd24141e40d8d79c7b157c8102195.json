{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  value: {}\n};\nvar URL = \"http://192.168.1.6:5000\";\nexport var counterSlice = createSlice({\n  name: \"counter\",\n  initialState: initialState,\n  reducers: {\n    increment: function () {\n      var _increment = _asyncToGenerator(function* (state, action) {\n        var email = action.payload.email;\n        var pass = action.payload.password;\n        var config = {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        };\n        var _yield$axios$post = yield axios.post(URL + \"/api/users/login\", {\n            email: email,\n            password: password\n          }, config),\n          data = _yield$axios$post.data;\n        state.value = _objectSpread(_objectSpread({}, state.value), {}, {\n          value: {\n            a: email,\n            b: pass\n          }\n        });\n      });\n      function increment(_x, _x2) {\n        return _increment.apply(this, arguments);\n      }\n      return increment;\n    }(),\n    decrement: function decrement(state) {\n      state.value = _objectSpread(_objectSpread({}, state.value), {}, {\n        value: {\n          a: 1,\n          b: 4\n        }\n      });\n    },\n    incrementByAmount: function incrementByAmount(state, action) {\n      state.value += action.payload;\n    }\n  }\n});\n\nvar _counterSlice$actions = counterSlice.actions,\n  increment = _counterSlice$actions.increment,\n  decrement = _counterSlice$actions.decrement,\n  incrementByAmount = _counterSlice$actions.incrementByAmount;\nexport { increment, decrement, incrementByAmount };\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","URL","counterSlice","name","reducers","increment","state","action","email","payload","pass","password","config","headers","axios","post","data","a","b","decrement","incrementByAmount","actions","reducer"],"sources":["F:/DoAn/DACN1/ShopApp/src/Redux/slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: {},\r\n};\r\nconst URL = `http://192.168.1.6:5000`;\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    increment: async (state, action) => {\r\n      const email = action.payload.email;\r\n      const pass = action.payload.password;\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        `${URL}/api/users/login`,\r\n        {\r\n          email,\r\n          password,\r\n        },\r\n        config\r\n      );\r\n      state.value = { ...state.value, value: { a: email, b: pass } };\r\n    },\r\n    decrement: (state) => {\r\n      state.value = { ...state.value, value: { a: 1, b: 4 } };\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n"],"mappings":";;;;AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,IAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CAAC;AACV,CAAC;AACD,IAAMC,GAAG,4BAA4B;AACrC,OAAO,IAAMC,YAAY,GAAGJ,WAAW,CAAC;EACtCK,IAAI,EAAE,SAAS;EACfJ,YAAY,EAAZA,YAAY;EACZK,QAAQ,EAAE;IACRC,SAAS;MAAA,mCAAE,WAAOC,KAAK,EAAEC,MAAM,EAAK;QAClC,IAAMC,KAAK,GAAGD,MAAM,CAACE,OAAO,CAACD,KAAK;QAClC,IAAME,IAAI,GAAGH,MAAM,CAACE,OAAO,CAACE,QAAQ;QAKpC,IAAMC,MAAM,GAAG;UACbC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC;QAED,8BAAuBC,KAAK,CAACC,IAAI,CAC5Bd,GAAG,uBACN;YACEO,KAAK,EAALA,KAAK;YACLG,QAAQ,EAARA;UACF,CAAC,EACDC,MAAM,CACP;UAPOI,IAAI,qBAAJA,IAAI;QAQZV,KAAK,CAACN,KAAK,mCAAQM,KAAK,CAACN,KAAK;UAAEA,KAAK,EAAE;YAAEiB,CAAC,EAAET,KAAK;YAAEU,CAAC,EAAER;UAAK;QAAC,EAAE;MAChE,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;IACDS,SAAS,EAAE,mBAACb,KAAK,EAAK;MACpBA,KAAK,CAACN,KAAK,mCAAQM,KAAK,CAACN,KAAK;QAAEA,KAAK,EAAE;UAAEiB,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE;MAAC,EAAE;IACzD,CAAC;IACDE,iBAAiB,EAAE,2BAACd,KAAK,EAAEC,MAAM,EAAK;MACpCD,KAAK,CAACN,KAAK,IAAIO,MAAM,CAACE,OAAO;IAC/B;EACF;AACF,CAAC,CAAC;;AAGK,4BAAoDP,YAAY,CAACmB,OAAO;EAAhEhB,SAAS,yBAATA,SAAS;EAAEc,SAAS,yBAATA,SAAS;EAAEC,iBAAiB,yBAAjBA,iBAAiB;AAA0B;AAEhF,eAAelB,YAAY,CAACoB,OAAO"},"metadata":{},"sourceType":"module"}