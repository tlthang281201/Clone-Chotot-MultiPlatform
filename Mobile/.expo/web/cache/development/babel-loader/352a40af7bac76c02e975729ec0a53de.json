{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n  _excluded2 = [\"_image\", \"_badgeSize\", \"source\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { Box, Image } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Avatar = function Avatar(_ref, ref) {\n  var children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    error = _React$useState2[0],\n    setError = _React$useState2[1];\n  var _usePropsResolution = usePropsResolution('Avatar', props),\n    _image = _usePropsResolution._image,\n    _badgeSize = _usePropsResolution._badgeSize,\n    source = _usePropsResolution.source,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var Badge = React.createElement(React.Fragment, null);\n  var remainingChildren = [];\n\n  React.Children.map(children, function (child) {\n    if (typeof (child === null || child === void 0 ? void 0 : child.type) === 'object' && (child === null || child === void 0 ? void 0 : child.type.displayName) === 'AvatarBadge') {\n      Badge = React.cloneElement(child, {\n        size: _badgeSize[0]\n      });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, resolvedProps, !!(source !== null && source !== void 0 && source.uri) && !error ? React.createElement(Image, _extends({\n    source: source,\n    onError: function onError() {\n      setError(true);\n    }\n  }, _image, {\n    ref: ref\n  })) : remainingChildren.length !== 0 && remainingChildren, Badge);\n};\nexport default memo(forwardRef(Avatar));","map":{"version":3,"sources":["Avatar.tsx"],"names":["React","memo","forwardRef","Box","Image","usePropsResolution","useHasResponsiveProps","Avatar","children","props","ref","error","setError","useState","_image","_badgeSize","source","resolvedProps","Badge","remainingChildren","Children","map","child","type","displayName","cloneElement","size","push","uri","length"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,GAAT,EAAcC,KAAd;AACA,SAASC,kBAAT;AAEA,SAASC,qBAAT;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAM,OAA0CG,GAAvC,EAAoD;EAAA,IAAjDF,QAAF,QAAEA,QAAF;IAAeC,KAAAA;EAC7B,sBAA0BT,KAAK,CAACa,QAANb,CAAe,KAAfA,CAA1B;IAAA;IAAOW,KAAD;IAAQC,QAAR;EACN,0BAAyDP,kBAAkB,CACzE,QADyE,EAEzEI,KAFyE,CAA3E;IAAQK,MAAF,uBAAEA,MAAF;IAAUC,UAAV,uBAAUA,UAAV;IAAsBC,MAAtB,uBAAsBA,MAAtB;IAAiCC,aAAAA;EAKvC,IAAIC,KAAK,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAAZ;EACA,IAAMC,iBAAgC,GAAG,EARwB;;EAUjEnB,KAAK,CAACoB,QAANpB,CAAeqB,GAAfrB,CAAmBQ,QAAnBR,EAA8BsB,UAAAA,KAAD,EAAW;IACtC,IACE,QAAOA,KAAP,KAAA,IAAA,IAAOA,KAAP,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAOA,KAAK,CAAEC,IAAd,CAAA,KAAuB,QAAvB,IACA,CAAA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,CAAA,GAAA,KAAK,CAAEA,IAAP,CAAYC,WAAZ,MAA4B,aAF9B,EAGE;MACAN,KAAK,GAAG,KAAK,CAACO,YAAN,CAAmBH,KAAnB,EAA0B;QAAEI,IAAI,EAAEX,UAAU,CAAC,CAAD;MAAlB,CAA1B,CAARG;IACD,CALD,MAKO;MACLC,iBAAiB,CAACQ,IAAlBR,CAAuBG,KAAvBH,CAAAA;IACD;EACF,CATDnB,CAViE;;EAsBjE,IAAIM,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EAED,OACE,KAAA,CAAA,aAAA,CAAC,GAAD,EAASQ,aAAT,EACG,CAAC,EAACD,MAAD,KAAA,IAAA,IAACA,MAAD,KAAA,KAAA,CAAA,IAACA,MAAM,CAAEY,GAAT,CAAD,IAAiB,CAACjB,KAAlB,GACC,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA,QAAA,CAAA;IACE,MAAM,EAAEK,MADV;IAEE,OAAO,EAAE,mBAAM;MACbJ,QAAQ,CAAC,IAAD,CAARA;IACD;EAJH,CAAA,EAKME,MALN,EAAA;IAME,GAAG,EAAEJ;EANP,CAAA,CAAA,CADD,GAUCS,iBAAiB,CAACU,MAAlBV,KAA6B,CAA7BA,IAAkCA,iBAXtC,EAaGD,KAbH,CADF;AAiBD,CA3CD;AA6CA,eAAejB,IAAI,CAACC,UAAU,CAACK,MAAD,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, { size: _badgeSize[0] });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps}>\n      {!!source?.uri && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}