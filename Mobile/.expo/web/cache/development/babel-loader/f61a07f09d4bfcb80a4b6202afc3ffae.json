{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useAnimatedValue from \"./useAnimatedValue\";\nvar getTranslateX = function getTranslateX(position, routes, getTabWidth, gap) {\n  var inputRange = routes.map(function (_, i) {\n    return i;\n  });\n\n  var outputRange = routes.reduce(function (acc, _, i) {\n    if (i === 0) return [0];\n    return [].concat(_toConsumableArray(acc), [acc[i - 1] + getTabWidth(i - 1) + (gap != null ? gap : 0)]);\n  }, []);\n  var translateX = position.interpolate({\n    inputRange: inputRange,\n    outputRange: outputRange,\n    extrapolate: 'clamp'\n  });\n  return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n};\nexport default function TabBarIndicator(_ref) {\n  var getTabWidth = _ref.getTabWidth,\n    layout = _ref.layout,\n    navigationState = _ref.navigationState,\n    position = _ref.position,\n    width = _ref.width,\n    gap = _ref.gap,\n    style = _ref.style;\n  var isIndicatorShown = React.useRef(false);\n  var isWidthDynamic = width === 'auto';\n  var opacity = useAnimatedValue(isWidthDynamic ? 0 : 1);\n  var hasMeasuredTabWidths = Boolean(layout.width) && navigationState.routes.every(function (_, i) {\n    return getTabWidth(i);\n  });\n  React.useEffect(function () {\n    var fadeInIndicator = function fadeInIndicator() {\n      if (!isIndicatorShown.current && isWidthDynamic &&\n      hasMeasuredTabWidths) {\n        isIndicatorShown.current = true;\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true\n        }).start();\n      }\n    };\n    fadeInIndicator();\n    return function () {\n      return opacity.stopAnimation();\n    };\n  }, [hasMeasuredTabWidths, isWidthDynamic, opacity]);\n  var routes = navigationState.routes;\n  var transform = [];\n  if (layout.width) {\n    var translateX = routes.length > 1 ? getTranslateX(position, routes, getTabWidth, gap) : 0;\n    transform.push({\n      translateX: translateX\n    });\n  }\n  if (width === 'auto') {\n    var inputRange = routes.map(function (_, i) {\n      return i;\n    });\n    var outputRange = inputRange.map(getTabWidth);\n    transform.push({\n      scaleX: routes.length > 1 ? position.interpolate({\n        inputRange: inputRange,\n        outputRange: outputRange,\n        extrapolate: 'clamp'\n      }) : outputRange[0]\n    }, {\n      translateX: 0.5\n    });\n  }\n  return React.createElement(Animated.View, {\n    style: [styles.indicator, {\n      width: width === 'auto' ? 1 : width\n    },\n    layout.width && Platform.OS !== 'macos' ? {\n      left: 0\n    } : {\n      left: 100 / routes.length * navigationState.index + \"%\"\n    }, {\n      transform: transform\n    }, width === 'auto' ? {\n      opacity: opacity\n    } : null, style]\n  });\n}\nvar styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2\n  }\n});","map":{"version":3,"sources":["TabBarIndicator.tsx"],"names":["React","useAnimatedValue","getTranslateX","position","routes","getTabWidth","gap","inputRange","map","_","i","outputRange","reduce","acc","translateX","interpolate","extrapolate","Animated","multiply","I18nManager","isRTL","TabBarIndicator","layout","navigationState","width","style","isIndicatorShown","useRef","isWidthDynamic","opacity","hasMeasuredTabWidths","Boolean","every","useEffect","fadeInIndicator","current","timing","toValue","duration","easing","Easing","in","linear","useNativeDriver","start","stopAnimation","transform","length","push","scaleX","styles","indicator","Platform","OS","left","index","create","backgroundColor","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  I18nManager,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\n\nimport type { Route, SceneRendererProps, NavigationState } from './types';\nimport useAnimatedValue from './useAnimatedValue';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n  gap?: number;\n};\n\nconst getTranslateX = (\n  position: Animated.AnimatedInterpolation,\n  routes: Route[],\n  getTabWidth: GetTabWidth,\n  gap?: number\n) => {\n  const inputRange = routes.map((_, i) => i);\n\n  // every index contains widths at all previous indices\n  const outputRange = routes.reduce<number[]>((acc, _, i) => {\n    if (i === 0) return [0];\n    return [...acc, acc[i - 1] + getTabWidth(i - 1) + (gap ?? 0)];\n  }, []);\n\n  const translateX = position.interpolate({\n    inputRange,\n    outputRange,\n    extrapolate: 'clamp',\n  });\n\n  return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n};\n\nexport default function TabBarIndicator<T extends Route>({\n  getTabWidth,\n  layout,\n  navigationState,\n  position,\n  width,\n  gap,\n  style,\n}: Props<T>) {\n  const isIndicatorShown = React.useRef(false);\n  const isWidthDynamic = width === 'auto';\n\n  const opacity = useAnimatedValue(isWidthDynamic ? 0 : 1);\n\n  const hasMeasuredTabWidths =\n    Boolean(layout.width) &&\n    navigationState.routes.every((_, i) => getTabWidth(i));\n\n  React.useEffect(() => {\n    const fadeInIndicator = () => {\n      if (\n        !isIndicatorShown.current &&\n        isWidthDynamic &&\n        // We should fade-in the indicator when we have widths for all the tab items\n        hasMeasuredTabWidths\n      ) {\n        isIndicatorShown.current = true;\n\n        Animated.timing(opacity, {\n          toValue: 1,\n          duration: 150,\n          easing: Easing.in(Easing.linear),\n          useNativeDriver: true,\n        }).start();\n      }\n    };\n\n    fadeInIndicator();\n\n    return () => opacity.stopAnimation();\n  }, [hasMeasuredTabWidths, isWidthDynamic, opacity]);\n\n  const { routes } = navigationState;\n\n  const transform = [];\n\n  if (layout.width) {\n    const translateX =\n      routes.length > 1 ? getTranslateX(position, routes, getTabWidth, gap) : 0;\n\n    transform.push({ translateX });\n  }\n\n  if (width === 'auto') {\n    const inputRange = routes.map((_, i) => i);\n    const outputRange = inputRange.map(getTabWidth);\n\n    transform.push(\n      {\n        scaleX:\n          routes.length > 1\n            ? position.interpolate({\n                inputRange,\n                outputRange,\n                extrapolate: 'clamp',\n              })\n            : outputRange[0],\n      },\n      { translateX: 0.5 }\n    );\n  }\n\n  return (\n    <Animated.View\n      style={[\n        styles.indicator,\n        { width: width === 'auto' ? 1 : width },\n        // If layout is not available, use `left` property for positioning the indicator\n        // This avoids rendering delay until we are able to calculate translateX\n        // If platform is macos use `left` property as `transform` is broken at the moment.\n        // See: https://github.com/microsoft/react-native-macos/issues/280\n        layout.width && Platform.OS !== 'macos'\n          ? { left: 0 }\n          : { left: `${(100 / routes.length) * navigationState.index}%` },\n        { transform },\n        width === 'auto' ? { opacity: opacity } : null,\n        style,\n      ]}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}