{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { snapValueToStep as $aTwux$snapValueToStep, clamp as $aTwux$clamp } from \"@react-aria/utils\";\nimport { useControlledState as $aTwux$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $aTwux$useMemo, useState as $aTwux$useState, useRef as $aTwux$useRef } from \"react\";\nvar $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;\nvar $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;\nvar $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;\nfunction $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {\n  var _props$isDisabled = props.isDisabled,\n    isDisabled = _props$isDisabled === void 0 ? false : _props$isDisabled,\n    _props$minValue = props.minValue,\n    minValue = _props$minValue === void 0 ? $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE : _props$minValue,\n    _props$maxValue = props.maxValue,\n    maxValue = _props$maxValue === void 0 ? $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE : _props$maxValue,\n    formatter = props.numberFormatter,\n    _props$step = props.step,\n    step = _props$step === void 0 ? $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE : _props$step,\n    _props$orientation = props.orientation,\n    orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation;\n  var pageSize = $aTwux$useMemo(function () {\n    var calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = $aTwux$snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n  var value1 = $aTwux$useMemo(function () {\n    return $28f99e3e86e6ec45$var$convertValue(props.value);\n  }, [props.value]);\n  var ref;\n  var defaultValue = $aTwux$useMemo(function () {\n    return (ref = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && ref !== void 0 ? ref : [minValue];\n  }, [props.defaultValue, minValue]);\n  var onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);\n  var onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);\n  var _$aTwux$useControlled = $aTwux$useControlledState(value1, defaultValue, onChange),\n    _$aTwux$useControlled2 = _slicedToArray(_$aTwux$useControlled, 2),\n    values = _$aTwux$useControlled2[0],\n    setValues = _$aTwux$useControlled2[1];\n  var _$aTwux$useState = $aTwux$useState(new Array(values.length).fill(false)),\n    _$aTwux$useState2 = _slicedToArray(_$aTwux$useState, 2),\n    isDraggings = _$aTwux$useState2[0],\n    setDraggings = _$aTwux$useState2[1];\n  var isEditablesRef = $aTwux$useRef(new Array(values.length).fill(true));\n  var _$aTwux$useState3 = $aTwux$useState(undefined),\n    _$aTwux$useState4 = _slicedToArray(_$aTwux$useState3, 2),\n    focusedIndex = _$aTwux$useState4[0],\n    setFocusedIndex = _$aTwux$useState4[1];\n  var valuesRef = $aTwux$useRef(null);\n  valuesRef.current = values;\n  var isDraggingsRef = $aTwux$useRef(null);\n  isDraggingsRef.current = isDraggings;\n  function getValuePercent(value) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n  function getThumbMinValue(index) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n  function isThumbEditable(index) {\n    return isEditablesRef.current[index];\n  }\n  function setThumbEditable(index, editable) {\n    isEditablesRef.current[index] = editable;\n  }\n  function updateValue(index, value) {\n    if (isDisabled || !isThumbEditable(index)) return;\n    var thisMin = getThumbMinValue(index);\n    var thisMax = getThumbMaxValue(index);\n    value = $aTwux$snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n  function updateDragging(index, dragging) {\n    if (isDisabled || !isThumbEditable(index)) return;\n    var wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) onChangeEnd(valuesRef.current);\n  }\n  function getFormattedValue(value) {\n    return formatter.format(value);\n  }\n  function setThumbPercent(index, percent) {\n    updateValue(index, getPercentValue(percent));\n  }\n  function getRoundedValue(value) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n  function getPercentValue(percent) {\n    var val = percent * (maxValue - minValue) + minValue;\n    return $aTwux$clamp(getRoundedValue(val), minValue, maxValue);\n  }\n  function incrementThumb(index) {\n    var stepSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var s = Math.max(stepSize, step);\n    updateValue(index, $aTwux$snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n  function decrementThumb(index) {\n    var stepSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var s = Math.max(stepSize, step);\n    updateValue(index, $aTwux$snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n  return {\n    values: values,\n    getThumbValue: function getThumbValue(index) {\n      return values[index];\n    },\n    setThumbValue: updateValue,\n    setThumbPercent: setThumbPercent,\n    isThumbDragging: function isThumbDragging(index) {\n      return isDraggings[index];\n    },\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: function getThumbPercent(index) {\n      return getValuePercent(values[index]);\n    },\n    getValuePercent: getValuePercent,\n    getThumbValueLabel: function getThumbValueLabel(index) {\n      return getFormattedValue(values[index]);\n    },\n    getFormattedValue: getFormattedValue,\n    getThumbMinValue: getThumbMinValue,\n    getThumbMaxValue: getThumbMaxValue,\n    getPercentValue: getPercentValue,\n    isThumbEditable: isThumbEditable,\n    setThumbEditable: setThumbEditable,\n    incrementThumb: incrementThumb,\n    decrementThumb: decrementThumb,\n    step: step,\n    pageSize: pageSize,\n    orientation: orientation,\n    isDisabled: isDisabled\n  };\n}\nfunction $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {\n  if (array[index] === value) return array;\n  return [].concat(_toConsumableArray(array.slice(0, index)), [value], _toConsumableArray(array.slice(index + 1)));\n}\nfunction $28f99e3e86e6ec45$var$convertValue(value) {\n  if (value == null) return undefined;\n  return Array.isArray(value) ? value : [value];\n}\nfunction $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {\n  return function (newValue) {\n    if (typeof value === 'number' || typeof defaultValue === 'number') onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);else onChange === null || onChange === void 0 ? void 0 : onChange(newValue);\n  };\n}\nexport { $28f99e3e86e6ec45$export$e5fda3247f5d67f9 as useSliderState };","map":{"version":3,"mappings":"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","names":["$28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE","$28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE","$28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE","$28f99e3e86e6ec45$export$e5fda3247f5d67f9","props","isDisabled","minValue","maxValue","formatter","numberFormatter","step","orientation","pageSize","$aTwux$useMemo","calcPageSize","$aTwux$snapValueToStep","Math","max","value1","$28f99e3e86e6ec45$var$convertValue","value","ref","defaultValue","onChange","$28f99e3e86e6ec45$var$createOnChange","onChangeEnd","$aTwux$useControlledState","values","setValues","$aTwux$useState","Array","length","fill","isDraggings","setDraggings","isEditablesRef","$aTwux$useRef","undefined","focusedIndex","setFocusedIndex","valuesRef","current","isDraggingsRef","getValuePercent","getThumbMinValue","index","getThumbMaxValue","isThumbEditable","setThumbEditable","editable","updateValue","thisMin","thisMax","$28f99e3e86e6ec45$var$replaceIndex","updateDragging","dragging","wasDragging","some","Boolean","getFormattedValue","format","setThumbPercent","percent","getPercentValue","getRoundedValue","round","val","$aTwux$clamp","incrementThumb","stepSize","s","decrementThumb","getThumbValue","setThumbValue","isThumbDragging","setThumbDragging","focusedThumb","setFocusedThumb","getThumbPercent","getThumbValueLabel","array","slice","isArray","newValue"],"sources":["packages/@react-stately/slider/src/useSliderState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {clamp, snapValueToStep} from '@react-aria/utils';\nimport {Orientation} from '@react-types/shared';\nimport {SliderProps} from '@react-types/slider';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useRef, useState} from 'react';\n\nexport interface SliderState {\n  /**\n   * Values managed by the slider by thumb index.\n   */\n  readonly values: number[],\n  /**\n   * Get the value for the specified thumb.\n   * @param index\n   */\n  getThumbValue(index: number): number,\n\n  /**\n   * Sets the value for the specified thumb.\n   * The actual value set will be clamped and rounded according to min/max/step.\n   * @param index\n   * @param value\n   */\n  setThumbValue(index: number, value: number): void,\n\n  /**\n   * Sets value for the specified thumb by percent offset (between 0 and 1).\n   * @param index\n   * @param percent\n   */\n  setThumbPercent(index: number, percent: number): void,\n\n  /**\n   * Whether the specific thumb is being dragged.\n   * @param index\n   */\n  isThumbDragging(index: number): boolean,\n  /**\n   * Set is dragging on the specified thumb.\n   * @param index\n   * @param dragging\n   */\n  setThumbDragging(index: number, dragging: boolean): void,\n\n  /**\n   * Currently-focused thumb index.\n   */\n  readonly focusedThumb: number | undefined,\n  /**\n   * Set focused true on specified thumb. This will remove focus from\n   * any thumb that had it before.\n   * @param index\n   */\n  setFocusedThumb(index: number | undefined): void,\n\n  /**\n   * Returns the specified thumb's value as a percentage from 0 to 1.\n   * @param index\n   */\n  getThumbPercent(index: number): number,\n\n  /**\n   * Returns the value as a percent between the min and max of the slider.\n   * @param index\n   */\n  getValuePercent(value: number): number,\n\n  /**\n   * Returns the string label for the specified thumb's value, per props.formatOptions.\n   * @param index\n   */\n  getThumbValueLabel(index: number): string,\n\n  /**\n   * Returns the string label for the value, per props.formatOptions.\n   * @param index\n   */\n  getFormattedValue(value: number): string,\n\n  /**\n   * Returns the min allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMinValue(index: number): number,\n\n  /**\n   * Returns the max allowed value for the specified thumb.\n   * @param index\n   */\n  getThumbMaxValue(index: number): number,\n\n  /**\n   * Converts a percent along track (between 0 and 1) to the corresponding value.\n   * @param percent\n   */\n  getPercentValue(percent: number): number,\n\n  /**\n   * Returns if the specified thumb is editable.\n   * @param index\n   */\n  isThumbEditable(index: number): boolean,\n\n  /**\n   * Set the specified thumb's editable state.\n   * @param index\n   * @param editable\n   */\n  setThumbEditable(index: number, editable: boolean): void,\n\n  /**\n   * Increments the value of the thumb by the step or page amount.\n   */\n  incrementThumb(index: number, stepSize?: number): void,\n  /**\n   * Decrements the value of the thumb by the step or page amount.\n   */\n  decrementThumb(index: number, stepSize?: number): void,\n\n  /**\n   * The step amount for the slider.\n   */\n  readonly step: number,\n\n  /**\n   * The page size for the slider, used to do a bigger step.\n   */\n  readonly pageSize: number,\n\n  /** The orientation of the slider. */\n  readonly orientation: Orientation,\n\n  /** Whether the slider is disabled. */\n  readonly isDisabled: boolean\n}\n\nconst DEFAULT_MIN_VALUE = 0;\nconst DEFAULT_MAX_VALUE = 100;\nconst DEFAULT_STEP_VALUE = 1;\n\nexport interface SliderStateOptions<T> extends SliderProps<T> {\n  numberFormatter: Intl.NumberFormat\n}\n\n/**\n * Provides state management for a slider component. Stores values for all thumbs,\n * formats values for localization, and provides methods to update the position\n * of any thumbs.\n * @param props\n */\nexport function useSliderState<T extends number | number[]>(props: SliderStateOptions<T>): SliderState {\n  const {\n    isDisabled = false,\n    minValue = DEFAULT_MIN_VALUE,\n    maxValue = DEFAULT_MAX_VALUE,\n    numberFormatter: formatter,\n    step = DEFAULT_STEP_VALUE,\n    orientation = 'horizontal'\n  } = props;\n\n  // Page step should be at least equal to step and always a multiple of the step.\n  let pageSize = useMemo(() => {\n    let calcPageSize = (maxValue - minValue) / 10;\n    calcPageSize = snapValueToStep(calcPageSize, 0, calcPageSize + step, step);\n    return Math.max(calcPageSize, step);\n  }, [step, maxValue, minValue]);\n\n  let value = useMemo(() => convertValue(props.value), [props.value]);\n  let defaultValue = useMemo(() => convertValue(props.defaultValue) ?? [minValue], [props.defaultValue, minValue]);\n  let onChange = createOnChange(props.value, props.defaultValue, props.onChange);\n  let onChangeEnd = createOnChange(props.value, props.defaultValue, props.onChangeEnd);\n\n  const [values, setValues] = useControlledState<number[]>(\n    value,\n    defaultValue,\n    onChange\n  );\n  const [isDraggings, setDraggings] = useState<boolean[]>(new Array(values.length).fill(false));\n  const isEditablesRef = useRef<boolean[]>(new Array(values.length).fill(true));\n  const [focusedIndex, setFocusedIndex] = useState<number | undefined>(undefined);\n\n  const valuesRef = useRef<number[]>(null);\n  valuesRef.current = values;\n  const isDraggingsRef = useRef<boolean[]>(null);\n  isDraggingsRef.current = isDraggings;\n\n  function getValuePercent(value: number) {\n    return (value - minValue) / (maxValue - minValue);\n  }\n\n  function getThumbMinValue(index: number) {\n    return index === 0 ? minValue : values[index - 1];\n  }\n  function getThumbMaxValue(index: number) {\n    return index === values.length - 1 ? maxValue : values[index + 1];\n  }\n\n  function isThumbEditable(index: number) {\n    return isEditablesRef.current[index];\n  }\n\n  function setThumbEditable(index: number, editable: boolean) {\n    isEditablesRef.current[index] = editable;\n  }\n\n  function updateValue(index: number, value: number) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n    const thisMin = getThumbMinValue(index);\n    const thisMax = getThumbMaxValue(index);\n\n    // Round value to multiple of step, clamp value between min and max\n    value = snapValueToStep(value, thisMin, thisMax, step);\n    valuesRef.current = replaceIndex(valuesRef.current, index, value);\n    setValues(valuesRef.current);\n  }\n\n  function updateDragging(index: number, dragging: boolean) {\n    if (isDisabled || !isThumbEditable(index)) {\n      return;\n    }\n\n    const wasDragging = isDraggingsRef.current[index];\n    isDraggingsRef.current = replaceIndex(isDraggingsRef.current, index, dragging);\n    setDraggings(isDraggingsRef.current);\n\n    // Call onChangeEnd if no handles are dragging.\n    if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) {\n      onChangeEnd(valuesRef.current);\n    }\n  }\n\n  function getFormattedValue(value: number) {\n    return formatter.format(value);\n  }\n\n  function setThumbPercent(index: number, percent: number) {\n    updateValue(index, getPercentValue(percent));\n  }\n\n  function getRoundedValue(value: number) {\n    return Math.round((value - minValue) / step) * step + minValue;\n  }\n\n  function getPercentValue(percent: number) {\n    const val = percent * (maxValue - minValue) + minValue;\n    return clamp(getRoundedValue(val), minValue, maxValue);\n  }\n\n  function incrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] + s, minValue, maxValue, step));\n  }\n\n  function decrementThumb(index: number, stepSize: number = 1) {\n    let s = Math.max(stepSize, step);\n    updateValue(index, snapValueToStep(values[index] - s, minValue, maxValue, step));\n  }\n\n  return {\n    values: values,\n    getThumbValue: (index: number) => values[index],\n    setThumbValue: updateValue,\n    setThumbPercent,\n    isThumbDragging: (index: number) => isDraggings[index],\n    setThumbDragging: updateDragging,\n    focusedThumb: focusedIndex,\n    setFocusedThumb: setFocusedIndex,\n    getThumbPercent: (index: number) => getValuePercent(values[index]),\n    getValuePercent,\n    getThumbValueLabel: (index: number) => getFormattedValue(values[index]),\n    getFormattedValue,\n    getThumbMinValue,\n    getThumbMaxValue,\n    getPercentValue,\n    isThumbEditable,\n    setThumbEditable,\n    incrementThumb,\n    decrementThumb,\n    step,\n    pageSize,\n    orientation,\n    isDisabled\n  };\n}\n\nfunction replaceIndex<T>(array: T[], index: number, value: T) {\n  if (array[index] === value) {\n    return array;\n  }\n\n  return [...array.slice(0, index), value, ...array.slice(index + 1)];\n}\n\nfunction convertValue(value: number | number[]) {\n  if (value == null) {\n    return undefined;\n  }\n\n  return Array.isArray(value) ? value : [value];\n}\n\nfunction createOnChange(value, defaultValue, onChange) {\n  return (newValue: number[]) => {\n    if (typeof value === 'number' || typeof defaultValue === 'number') {\n      onChange?.(newValue[0]);\n    } else {\n      onChange?.(newValue);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}