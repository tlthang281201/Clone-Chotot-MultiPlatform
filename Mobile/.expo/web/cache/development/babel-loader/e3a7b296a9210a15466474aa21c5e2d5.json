{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\"],\n  _excluded2 = [\"size\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from \"../../../hooks\";\nimport SVGIcon from \"./SVGIcon\";\nimport { Factory } from \"../../../factory\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Icon = function Icon(_ref, ref) {\n  var as = _ref.as,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _usePropsResolution = usePropsResolution('Icon', props),\n    size = _usePropsResolution.size,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var tokenizedFontSize = useToken('space', size);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return React.createElement(SVGIcon, _extends({\n      size: size\n    }, resolvedProps, {\n      ref: ref\n    }));\n  }\n  var isJSX = React.isValidElement(as);\n  var StyledAs = Factory(isJSX ? function (resolvedProps) {\n    return React.cloneElement(as, _objectSpread(_objectSpread({}, resolvedProps), as.props));\n  } : as);\n  return React.createElement(StyledAs, _extends({}, resolvedProps, {\n    fontSize: tokenizedFontSize,\n    lineHeight: tokenizedFontSize,\n    size: size,\n    ref: ref\n  }));\n};\nexport default memo(forwardRef(Icon));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,QAAT,EAAmBC,kBAAnB;AAEA,OAAOC,OAAP;AACA,SAASC,OAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAI,OAAkCC,GAA/B,EAA6C;EAAA,IAA1CC,EAAF,QAAEA,EAAF;IAASC;EACrB,0BAAmCP,kBAAkB,CAAC,MAAD,EAASO,KAAT,CAArD;IAAQC,IAAF,uBAAEA,IAAF;IAAWC;EACjB,IAAMC,iBAAiB,GAAGX,QAAQ,CAAC,OAAD,EAAUS,IAAV,CAAlC;;EAEA,IAAIL,qBAAqB,CAACI,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,IAAI,CAACD,EAAL,EAAS;IACP,OAAOV,oBAACK,OAAD;MAASO,IAAI,EAAEA;IAAf,GAAyBC,aAAzB;MAAwCJ,GAAG,EAAEA;IAA7C,GAAP;EACD;EACD,IAAMM,KAAK,GAAGf,KAAK,CAACgB,cAAN,CAAqBN,EAArB,CAAd;EACA,IAAMO,QAAQ,GAAGX,OAAO,CACtBS,KAAK,GACAF,uBAAD;IAAA,OACEb,KAAK,CAACkB,YAAN,CAAmBR,EAAnB,kCACKG,aADkB,GAGlBH,EAAE,CAACC,OALT;EAAA,IAODD,EARkB,CAAxB;EAWA,OACEV,oBAACiB,QAAD,eACMJ,aADN;IAEEM,QAAQ,EAAEL,iBAFZ;IAGEM,UAAU,EAAEN,iBAHd;IAIEF,IAAI,EAAEA,IAJR;IAKEH,GAAG,EAAEA;EALP,GADF;AASD,CA/BD;AAiCA,eAAeR,IAAI,CAACC,UAAU,CAACM,IAAD,CAAX,CAAnB","names":["React","memo","forwardRef","useToken","usePropsResolution","SVGIcon","Factory","useHasResponsiveProps","Icon","ref","as","props","size","resolvedProps","tokenizedFontSize","isJSX","isValidElement","StyledAs","cloneElement","fontSize","lineHeight"],"sources":["Icon.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = ({ as, ...props }: IIconProps, ref?: any) => {\n  const { size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"module"}