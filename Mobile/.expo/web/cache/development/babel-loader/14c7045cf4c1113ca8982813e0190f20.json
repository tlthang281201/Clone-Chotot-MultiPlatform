{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\nfunction $587d3ad58be6d31f$export$daff6da51032a415() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _$b3nuO$useControlled = $b3nuO$useControlledState(props.value, props.defaultValue || [], props.onChange),\n    _$b3nuO$useControlled2 = _slicedToArray(_$b3nuO$useControlled, 2),\n    selectedValues = _$b3nuO$useControlled2[0],\n    _setValue = _$b3nuO$useControlled2[1];\n  var state = {\n    value: selectedValues,\n    setValue: function setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      _setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected: function isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue: function addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) _setValue(selectedValues.concat(value));\n    },\n    removeValue: function removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));\n    },\n    toggleValue: function toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) _setValue(selectedValues.filter(function (existingValue) {\n        return existingValue !== value;\n      }));else _setValue(selectedValues.concat(value));\n    },\n    validationState: props.validationState\n  };\n  return state;\n}\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"sources":["packages/@react-stately/checkbox/src/useCheckboxGroupState.ts"],"names":[],"mappings":";;SAiDgB,yCAAqB,GAAqD;EAAA,IAApD,KAAyB,uEAAG,CAAC,CAAC;EAClE,4BAAiC,yBAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,YAAY,IAAI,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAA;IAAA;IAApG,cAAc;IAAE,SAAQ;EAE7B,IAAM,KAAK,GAAuB;IAChC,KAAK,EAAE,cAAc;IACrB,QAAQ,oBAAC,KAAK,EAAE;MACd,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC;MAGF,SAAQ,CAAC,KAAK,CAAA;IAChB,CAAC;IACD,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK;IACrC,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK;IACrC,UAAU,sBAAC,KAAK,EAAE;MAChB,OAAO,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAA;IACtC,CAAC;IACD,QAAQ,oBAAC,KAAK,EAAE;MACd,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC;MAEF,IAAE,CAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAA,EAChC,SAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAA,CAAA;IAExC,CAAC;IACD,WAAW,uBAAC,KAAK,EAAE;MACjB,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC;MAEF,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAA,EAC/B,SAAQ,CAAC,cAAc,CAAC,MAAM,CAAA,UAAC,aAAa;QAAA,OAAI,aAAa,KAAK,KAAK;MAAA,E;IAE3E,CAAC;IACD,WAAW,uBAAC,KAAK,EAAE;MACjB,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,EACtC;MAEF,IAAI,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAA,EAC/B,SAAQ,CAAC,cAAc,CAAC,MAAM,CAAA,UAAC,aAAa;QAAA,OAAI,aAAa,KAAK,KAAK;MAAA,E,OAEvE,SAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAA,CAAA;IAExC,CAAC;IACD,eAAe,EAAE,KAAK,CAAC;EACzB,CAAC;EAED,OAAO,KAAK;AACd","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void,\n\n  /** The current validation state of the checkbox group. */\n  validationState: ValidationState\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    validationState: props.validationState\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}