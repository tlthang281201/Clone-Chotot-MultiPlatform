{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { Alert, Button, Image, Text, View } from \"native-base\";\nimport { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport DocumentPicker, { isCancel, isInProgress, types } from \"react-native-document-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction TestScreen() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    uploading = _useState2[0],\n    setUploading = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    avatarUrl = _useState4[0],\n    setAvatarUrl = _useState4[1];\n  var avatarSize = {\n    height: 150,\n    width: 150\n  };\n  function uploadAvatar() {\n    return _uploadAvatar.apply(this, arguments);\n  }\n  function _uploadAvatar() {\n    _uploadAvatar = _asyncToGenerator(function* () {\n      try {\n        setUploading(true);\n        var file = yield DocumentPicker.pickSingle({\n          presentationStyle: \"fullScreen\",\n          copyTo: \"cachesDirectory\",\n          type: types.images,\n          mode: \"open\"\n        });\n        var photo = {\n          uri: file.fileCopyUri,\n          type: file.type,\n          name: file.name\n        };\n      } catch (error) {\n        if (isCancel(error)) {\n          console.warn(\"cancelled\");\n        } else if (isInProgress(error)) {\n          console.warn(\"multiple pickers were opened, only the last will be considered\");\n        } else if (error instanceof Error) {\n          Alert.alert(error.message);\n        } else {\n          throw error;\n        }\n      } finally {\n        setUploading(false);\n      }\n    });\n    return _uploadAvatar.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    children: [avatarUrl ? _jsx(Image, {\n      source: {\n        uri: avatarUrl\n      },\n      accessibilityLabel: \"Avatar\",\n      style: [avatarSize, styles.avatar, styles.image]\n    }) : _jsx(View, {\n      style: [avatarSize, styles.avatar, styles.noImage]\n    }), _jsx(View, {\n      children: _jsx(Button, {\n        title: uploading ? \"Uploading ...\" : \"Upload\",\n        onPress: uploadAvatar,\n        disabled: uploading\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  avatar: {\n    borderRadius: 5,\n    overflow: \"hidden\",\n    maxWidth: \"100%\"\n  },\n  image: {\n    objectFit: \"cover\",\n    paddingTop: 0\n  },\n  noImage: {\n    backgroundColor: \"#333\",\n    border: \"1px solid rgb(200, 200, 200)\",\n    borderRadius: 5\n  }\n});\nexport default TestScreen;","map":{"version":3,"names":["Alert","Button","Image","Text","View","useState","DocumentPicker","isCancel","isInProgress","types","TestScreen","uploading","setUploading","avatarUrl","setAvatarUrl","avatarSize","height","width","uploadAvatar","file","pickSingle","presentationStyle","copyTo","type","images","mode","photo","uri","fileCopyUri","name","error","console","warn","Error","alert","message","styles","avatar","image","noImage","StyleSheet","create","borderRadius","overflow","maxWidth","objectFit","paddingTop","backgroundColor","border"],"sources":["F:/DoAn/DACN1/ShopApp/src/Screens/TestScreen.js"],"sourcesContent":["import { Alert, Button, Image, Text, View } from \"native-base\";\r\nimport { useState } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\n\r\nimport DocumentPicker, {\r\n  isCancel,\r\n  isInProgress,\r\n  types,\r\n} from \"react-native-document-picker\";\r\n\r\nfunction TestScreen() {\r\n  const [uploading, setUploading] = useState(false);\r\n  const [avatarUrl, setAvatarUrl] = useState(null);\r\n  const avatarSize = { height: 150, width: 150 };\r\n  async function uploadAvatar() {\r\n    try {\r\n      setUploading(true);\r\n\r\n      const file = await DocumentPicker.pickSingle({\r\n        presentationStyle: \"fullScreen\",\r\n        copyTo: \"cachesDirectory\",\r\n        type: types.images,\r\n        mode: \"open\",\r\n      });\r\n\r\n      const photo = {\r\n        uri: file.fileCopyUri,\r\n        type: file.type,\r\n        name: file.name,\r\n      };\r\n    } catch (error) {\r\n      if (isCancel(error)) {\r\n        console.warn(\"cancelled\");\r\n        // User cancelled the picker, exit any dialogs or menus and move on\r\n      } else if (isInProgress(error)) {\r\n        console.warn(\r\n          \"multiple pickers were opened, only the last will be considered\"\r\n        );\r\n      } else if (error instanceof Error) {\r\n        Alert.alert(error.message);\r\n      } else {\r\n        throw error;\r\n      }\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      {avatarUrl ? (\r\n        <Image\r\n          source={{ uri: avatarUrl }}\r\n          accessibilityLabel=\"Avatar\"\r\n          style={[avatarSize, styles.avatar, styles.image]}\r\n        />\r\n      ) : (\r\n        <View style={[avatarSize, styles.avatar, styles.noImage]} />\r\n      )}\r\n      <View>\r\n        <Button\r\n          title={uploading ? \"Uploading ...\" : \"Upload\"}\r\n          onPress={uploadAvatar}\r\n          disabled={uploading}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  avatar: {\r\n    borderRadius: 5,\r\n    overflow: \"hidden\",\r\n    maxWidth: \"100%\",\r\n  },\r\n  image: {\r\n    objectFit: \"cover\",\r\n    paddingTop: 0,\r\n  },\r\n  noImage: {\r\n    backgroundColor: \"#333\",\r\n    border: \"1px solid rgb(200, 200, 200)\",\r\n    borderRadius: 5,\r\n  },\r\n});\r\nexport default TestScreen;\r\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,aAAa;AAC9D,SAASC,QAAQ,QAAQ,OAAO;AAAC;AAGjC,OAAOC,cAAc,IACnBC,QAAQ,EACRC,YAAY,EACZC,KAAK,QACA,8BAA8B;AAAC;AAAA;AAEtC,SAASC,UAAU,GAAG;EACpB,gBAAkCL,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA1CM,SAAS;IAAEC,YAAY;EAC9B,iBAAkCP,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAzCQ,SAAS;IAAEC,YAAY;EAC9B,IAAMC,UAAU,GAAG;IAAEC,MAAM,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC;EAAC,SAChCC,YAAY;IAAA;EAAA;EAAA;IAAA,kCAA3B,aAA8B;MAC5B,IAAI;QACFN,YAAY,CAAC,IAAI,CAAC;QAElB,IAAMO,IAAI,SAASb,cAAc,CAACc,UAAU,CAAC;UAC3CC,iBAAiB,EAAE,YAAY;UAC/BC,MAAM,EAAE,iBAAiB;UACzBC,IAAI,EAAEd,KAAK,CAACe,MAAM;UAClBC,IAAI,EAAE;QACR,CAAC,CAAC;QAEF,IAAMC,KAAK,GAAG;UACZC,GAAG,EAAER,IAAI,CAACS,WAAW;UACrBL,IAAI,EAAEJ,IAAI,CAACI,IAAI;UACfM,IAAI,EAAEV,IAAI,CAACU;QACb,CAAC;MACH,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd,IAAIvB,QAAQ,CAACuB,KAAK,CAAC,EAAE;UACnBC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;QAE3B,CAAC,MAAM,IAAIxB,YAAY,CAACsB,KAAK,CAAC,EAAE;UAC9BC,OAAO,CAACC,IAAI,CACV,gEAAgE,CACjE;QACH,CAAC,MAAM,IAAIF,KAAK,YAAYG,KAAK,EAAE;UACjCjC,KAAK,CAACkC,KAAK,CAACJ,KAAK,CAACK,OAAO,CAAC;QAC5B,CAAC,MAAM;UACL,MAAML,KAAK;QACb;MACF,CAAC,SAAS;QACRlB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA;EAAA;EAED,OACE,MAAC,IAAI;IAAA,WACFC,SAAS,GACR,KAAC,KAAK;MACJ,MAAM,EAAE;QAAEc,GAAG,EAAEd;MAAU,CAAE;MAC3B,kBAAkB,EAAC,QAAQ;MAC3B,KAAK,EAAE,CAACE,UAAU,EAAEqB,MAAM,CAACC,MAAM,EAAED,MAAM,CAACE,KAAK;IAAE,EACjD,GAEF,KAAC,IAAI;MAAC,KAAK,EAAE,CAACvB,UAAU,EAAEqB,MAAM,CAACC,MAAM,EAAED,MAAM,CAACG,OAAO;IAAE,EAC1D,EACD,KAAC,IAAI;MAAA,UACH,KAAC,MAAM;QACL,KAAK,EAAE5B,SAAS,GAAG,eAAe,GAAG,QAAS;QAC9C,OAAO,EAAEO,YAAa;QACtB,QAAQ,EAAEP;MAAU;IACpB,EACG;EAAA,EACF;AAEX;AAEA,IAAMyB,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,MAAM,EAAE;IACNK,YAAY,EAAE,CAAC;IACfC,QAAQ,EAAE,QAAQ;IAClBC,QAAQ,EAAE;EACZ,CAAC;EACDN,KAAK,EAAE;IACLO,SAAS,EAAE,OAAO;IAClBC,UAAU,EAAE;EACd,CAAC;EACDP,OAAO,EAAE;IACPQ,eAAe,EAAE,MAAM;IACvBC,MAAM,EAAE,8BAA8B;IACtCN,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AACF,eAAehC,UAAU"},"metadata":{},"sourceType":"module"}