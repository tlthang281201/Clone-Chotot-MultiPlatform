{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { useKeyboardDismissable } from \"../../../hooks\";\nimport { ExitAnimationContext } from \"./ExitAnimationContext\";\nexport function Overlay(_ref) {\n  var children = _ref.children,\n    isOpen = _ref.isOpen,\n    _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n    useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n    _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n    isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n    _ref$animationPreset = _ref.animationPreset,\n    animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n    onRequestClose = _ref.onRequestClose,\n    style = _ref.style,\n    unmountOnExit = _ref.unmountOnExit;\n  var _React$useState = React.useState(!isOpen),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    exited = _React$useState2[0],\n    setExited = _React$useState2[1];\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n  var styleObj = _objectSpread({}, style);\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, React.createElement(Modal, {\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n  return (\n    React.createElement(OverlayContainer, {\n      style: _objectSpread({}, styleObj)\n    }, React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, children))\n  );\n}","map":{"version":3,"sources":["Overlay.tsx"],"names":["OverlayContainer","React","useKeyboardDismissable","ExitAnimationContext","Overlay","children","isOpen","useRNModalOnAndroid","isKeyboardDismissable","animationPreset","onRequestClose","style","unmountOnExit","exited","setExited","useState","enabled","callback","styleObj","overflow","display","Platform","OS"],"mappings":";;;;AACA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAGA,SAASC,sBAAT;AACA,SAASC,oBAAT;AAcA,OAAO,SAASC,OAAT,OAUW;EAAA,IAThBC,QADsB,QACtBA,QADsB;IAEtBC,MAFsB,QAEtBA,MAFsB;IAAA,6BAGtBC,mBAAmB;IAAnBA,mBAAmB,sCAAG,KAHA;IAAA,6BAItBC,qBAAqB;IAArBA,qBAAqB,sCAAG,IAJF;IAAA,4BAMtBC,eAAe;IAAfA,eAAe,qCAAG,MANI;IAOtBC,cAPsB,QAOtBA,cAPsB;IAQtBC,KARsB,QAQtBA,KARsB;IAStBC,aAAAA,QAAAA,aAAAA;EAEA,sBAA4BX,KAAK,CAACc,QAANd,CAAe,CAACK,MAAhBL,CAA5B;IAAA;IAAOY,MAAD;IAASC,SAAT;EAENZ,sBAAsB,CAAC;IACrBc,OAAO,EAAEV,MAAM,IAAIE,qBADE;IAErBS,QAAQ,EAAEP,cAAc,GAAGA,cAAH,GAAoB,YAAM,CAAE;EAF/B,CAAD,CAAtBR;EAIA,IAAMgB,QAAQ,qBAAQP,KAAAA,CAAtB;EACA,IAAIF,eAAe,KAAK,OAAxB,EAAiC;IAC/BS,QAAQ,CAACC,QAATD,GAAoB,QAApBA;IACAA,QAAQ,CAACE,OAATF,GAAmB,MAAnBA;EACD,CAHD,MAGO;IACLA,QAAQ,CAACE,OAATF,GAAmBL,MAAM,IAAI,CAACP,MAAXO,GAAoB,MAApBA,GAA6B,MAAhDK;EACD;EAED,IAAIG,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,IAA6Bd,mBAAjC,EAAsD;IACpD,OACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAsB,QAAtB,EAAA;MAA+B,KAAK,EAAE;QAAEM,MAAF,EAAEA,MAAF;QAAUC,SAAAA,EAAAA;MAAV;IAAtC,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,KAAD,EAAA;MACE,WAAW,EAAA,IADb;MAEE,OAAO,EAAER,MAFX;MAGE,cAAc,EAAEI,cAHlB;MAIE,aAAa,EAAED;IAJjB,CAAA,EAMGJ,QANH,CADF,CADF;EAYD;EAED,IAAIO,aAAa,IAAI,CAACN,MAAlBM,IAA4BC,MAAhC,EAAwC;IACtC,OAAO,IAAP;EACD;EAED;IAEE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA;MAAkB,KAAK,oBAAOK,QAAAA;IAA9B,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAsB,QAAtB,EAAA;MAA+B,KAAK,EAAE;QAAEL,MAAF,EAAEA,MAAF;QAAUC,SAAAA,EAAAA;MAAV;IAAtC,CAAA,EACGT,QADH,CADF;EAAA;AAMH","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform, ViewStyle } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: (() => any) | undefined;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}