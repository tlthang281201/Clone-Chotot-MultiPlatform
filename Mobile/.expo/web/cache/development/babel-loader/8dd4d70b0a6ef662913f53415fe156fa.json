{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { v4 as uuidv4 } from 'uuid';\nimport ExponentFileSystem from \"./ExponentFileSystem\";\nimport { EncodingType, FileSystemSessionType, FileSystemUploadType } from \"./FileSystem.types\";\nif (!ExponentFileSystem) {\n  console.warn(\"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\");\n}\nvar _unused = new EventEmitter(ExponentFileSystem);\nexport { EncodingType, FileSystemSessionType, FileSystemUploadType };\nfunction normalizeEndingSlash(p) {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\nexport var documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport var cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\nvar bundledAssets = ExponentFileSystem.bundledAssets,\n  bundleDirectory = ExponentFileSystem.bundleDirectory;\nexport { bundledAssets, bundleDirectory };\nexport function getInfoAsync(_x) {\n  return _getInfoAsync.apply(this, arguments);\n}\nfunction _getInfoAsync() {\n  _getInfoAsync = _asyncToGenerator(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExponentFileSystem.getInfoAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n    }\n    return yield ExponentFileSystem.getInfoAsync(fileUri, options);\n  });\n  return _getInfoAsync.apply(this, arguments);\n}\nexport function readAsStringAsync(_x2, _x3) {\n  return _readAsStringAsync.apply(this, arguments);\n}\nfunction _readAsStringAsync() {\n  _readAsStringAsync = _asyncToGenerator(function* (fileUri, options) {\n    if (!ExponentFileSystem.readAsStringAsync) {\n      throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n    }\n    return yield ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n  });\n  return _readAsStringAsync.apply(this, arguments);\n}\nexport function getContentUriAsync(_x4) {\n  return _getContentUriAsync.apply(this, arguments);\n}\nfunction _getContentUriAsync() {\n  _getContentUriAsync = _asyncToGenerator(function* (fileUri) {\n    if (Platform.OS === 'android') {\n      if (!ExponentFileSystem.getContentUriAsync) {\n        throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n      }\n      return yield ExponentFileSystem.getContentUriAsync(fileUri);\n    } else {\n      return new Promise(function (resolve, reject) {\n        resolve(fileUri);\n      });\n    }\n  });\n  return _getContentUriAsync.apply(this, arguments);\n}\nexport function writeAsStringAsync(_x5, _x6) {\n  return _writeAsStringAsync.apply(this, arguments);\n}\nfunction _writeAsStringAsync() {\n  _writeAsStringAsync = _asyncToGenerator(function* (fileUri, contents) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!ExponentFileSystem.writeAsStringAsync) {\n      throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n    }\n    return yield ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n  });\n  return _writeAsStringAsync.apply(this, arguments);\n}\nexport function deleteAsync(_x7) {\n  return _deleteAsync.apply(this, arguments);\n}\nfunction _deleteAsync() {\n  _deleteAsync = _asyncToGenerator(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExponentFileSystem.deleteAsync) {\n      throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n    }\n    return yield ExponentFileSystem.deleteAsync(fileUri, options);\n  });\n  return _deleteAsync.apply(this, arguments);\n}\nexport function deleteLegacyDocumentDirectoryAndroid() {\n  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);\n}\nfunction _deleteLegacyDocumentDirectoryAndroid() {\n  _deleteLegacyDocumentDirectoryAndroid = _asyncToGenerator(function* () {\n    if (Platform.OS !== 'android' || documentDirectory == null) {\n      return;\n    }\n    var legacyDocumentDirectory = documentDirectory + \"ExperienceData/\";\n    return yield deleteAsync(legacyDocumentDirectory, {\n      idempotent: true\n    });\n  });\n  return _deleteLegacyDocumentDirectoryAndroid.apply(this, arguments);\n}\nexport function moveAsync(_x8) {\n  return _moveAsync.apply(this, arguments);\n}\nfunction _moveAsync() {\n  _moveAsync = _asyncToGenerator(function* (options) {\n    if (!ExponentFileSystem.moveAsync) {\n      throw new UnavailabilityError('expo-file-system', 'moveAsync');\n    }\n    return yield ExponentFileSystem.moveAsync(options);\n  });\n  return _moveAsync.apply(this, arguments);\n}\nexport function copyAsync(_x9) {\n  return _copyAsync.apply(this, arguments);\n}\nfunction _copyAsync() {\n  _copyAsync = _asyncToGenerator(function* (options) {\n    if (!ExponentFileSystem.copyAsync) {\n      throw new UnavailabilityError('expo-file-system', 'copyAsync');\n    }\n    return yield ExponentFileSystem.copyAsync(options);\n  });\n  return _copyAsync.apply(this, arguments);\n}\nexport function makeDirectoryAsync(_x10) {\n  return _makeDirectoryAsync.apply(this, arguments);\n}\nfunction _makeDirectoryAsync() {\n  _makeDirectoryAsync = _asyncToGenerator(function* (fileUri) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExponentFileSystem.makeDirectoryAsync) {\n      throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n    }\n    return yield ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n  });\n  return _makeDirectoryAsync.apply(this, arguments);\n}\nexport function readDirectoryAsync(_x11) {\n  return _readDirectoryAsync.apply(this, arguments);\n}\nfunction _readDirectoryAsync() {\n  _readDirectoryAsync = _asyncToGenerator(function* (fileUri) {\n    if (!ExponentFileSystem.readDirectoryAsync) {\n      throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n    }\n    return yield ExponentFileSystem.readDirectoryAsync(fileUri, {});\n  });\n  return _readDirectoryAsync.apply(this, arguments);\n}\nexport function getFreeDiskStorageAsync() {\n  return _getFreeDiskStorageAsync.apply(this, arguments);\n}\nfunction _getFreeDiskStorageAsync() {\n  _getFreeDiskStorageAsync = _asyncToGenerator(function* () {\n    if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n    }\n    return yield ExponentFileSystem.getFreeDiskStorageAsync();\n  });\n  return _getFreeDiskStorageAsync.apply(this, arguments);\n}\nexport function getTotalDiskCapacityAsync() {\n  return _getTotalDiskCapacityAsync.apply(this, arguments);\n}\nfunction _getTotalDiskCapacityAsync() {\n  _getTotalDiskCapacityAsync = _asyncToGenerator(function* () {\n    if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n    }\n    return yield ExponentFileSystem.getTotalDiskCapacityAsync();\n  });\n  return _getTotalDiskCapacityAsync.apply(this, arguments);\n}\nexport function downloadAsync(_x12, _x13) {\n  return _downloadAsync.apply(this, arguments);\n}\nfunction _downloadAsync() {\n  _downloadAsync = _asyncToGenerator(function* (uri, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!ExponentFileSystem.downloadAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n    }\n    return yield ExponentFileSystem.downloadAsync(uri, fileUri, _objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND\n    }, options));\n  });\n  return _downloadAsync.apply(this, arguments);\n}\nexport function uploadAsync(_x14, _x15) {\n  return _uploadAsync.apply(this, arguments);\n}\nfunction _uploadAsync() {\n  _uploadAsync = _asyncToGenerator(function* (url, fileUri) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!ExponentFileSystem.uploadAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n    }\n    return yield ExponentFileSystem.uploadAsync(url, fileUri, _objectSpread(_objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT\n    }, options), {}, {\n      httpMethod: (options.httpMethod || 'POST').toUpperCase()\n    }));\n  });\n  return _uploadAsync.apply(this, arguments);\n}\nexport function createDownloadResumable(uri, fileUri, options, callback, resumeData) {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\nexport function createUploadTask(url, fileUri, options, callback) {\n  return new UploadTask(url, fileUri, options, callback);\n}\nexport var FileSystemCancellableNetworkTask = function () {\n  function FileSystemCancellableNetworkTask() {\n    _classCallCheck(this, FileSystemCancellableNetworkTask);\n    this._uuid = uuidv4();\n    this.taskWasCanceled = false;\n    this.emitter = new EventEmitter(ExponentFileSystem);\n  }\n  _createClass(FileSystemCancellableNetworkTask, [{\n    key: \"cancelAsync\",\n    value: function () {\n      var _cancelAsync = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.networkTaskCancelAsync) {\n          throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n        }\n        this.removeSubscription();\n        this.taskWasCanceled = true;\n        return yield ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n      });\n      function cancelAsync() {\n        return _cancelAsync.apply(this, arguments);\n      }\n      return cancelAsync;\n    }()\n  }, {\n    key: \"isTaskCancelled\",\n    value: function isTaskCancelled() {\n      if (this.taskWasCanceled) {\n        console.warn('This task was already canceled.');\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"uuid\",\n    get: function get() {\n      return this._uuid;\n    }\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription() {\n      var _this = this;\n      if (this.subscription) {\n        return;\n      }\n      this.subscription = this.emitter.addListener(this.getEventName(), function (event) {\n        if (event.uuid === _this.uuid) {\n          var callback = _this.getCallback();\n          if (callback) {\n            callback(event.data);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      if (!this.subscription) {\n        return;\n      }\n      this.emitter.removeSubscription(this.subscription);\n      this.subscription = null;\n    }\n  }]);\n  return FileSystemCancellableNetworkTask;\n}();\nexport var UploadTask = function (_FileSystemCancellabl) {\n  _inherits(UploadTask, _FileSystemCancellabl);\n  var _super = _createSuper(UploadTask);\n  function UploadTask(url, fileUri, options, callback) {\n    var _options$httpMethod;\n    var _this2;\n    _classCallCheck(this, UploadTask);\n    _this2 = _super.call(this);\n    _this2.url = url;\n    _this2.fileUri = fileUri;\n    _this2.callback = callback;\n    var httpMethod = (options == null ? void 0 : (_options$httpMethod = options.httpMethod) == null ? void 0 : _options$httpMethod.toUpperCase()) || 'POST';\n    _this2.options = _objectSpread(_objectSpread({\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT\n    }, options), {}, {\n      httpMethod: httpMethod\n    });\n    return _this2;\n  }\n  _createClass(UploadTask, [{\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.uploadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"uploadAsync\",\n    value: function () {\n      var _uploadAsync2 = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.uploadTaskStartAsync) {\n          throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n        }\n        if (this.isTaskCancelled()) {\n          return;\n        }\n        this.addSubscription();\n        var result = yield ExponentFileSystem.uploadTaskStartAsync(this.url, this.fileUri, this.uuid, this.options);\n        this.removeSubscription();\n        return result;\n      });\n      function uploadAsync() {\n        return _uploadAsync2.apply(this, arguments);\n      }\n      return uploadAsync;\n    }()\n  }]);\n  return UploadTask;\n}(FileSystemCancellableNetworkTask);\nexport var DownloadResumable = function (_FileSystemCancellabl2) {\n  _inherits(DownloadResumable, _FileSystemCancellabl2);\n  var _super2 = _createSuper(DownloadResumable);\n  function DownloadResumable(url, _fileUri) {\n    var _this3;\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var callback = arguments.length > 3 ? arguments[3] : undefined;\n    var resumeData = arguments.length > 4 ? arguments[4] : undefined;\n    _classCallCheck(this, DownloadResumable);\n    _this3 = _super2.call(this);\n    _this3.url = url;\n    _this3._fileUri = _fileUri;\n    _this3.options = options;\n    _this3.callback = callback;\n    _this3.resumeData = resumeData;\n    return _this3;\n  }\n  _createClass(DownloadResumable, [{\n    key: \"fileUri\",\n    get: function get() {\n      return this._fileUri;\n    }\n  }, {\n    key: \"getEventName\",\n    value: function getEventName() {\n      return 'expo-file-system.downloadProgress';\n    }\n  }, {\n    key: \"getCallback\",\n    value: function getCallback() {\n      return this.callback;\n    }\n  }, {\n    key: \"downloadAsync\",\n    value: function () {\n      var _downloadAsync2 = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.downloadResumableStartAsync) {\n          throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n        if (this.isTaskCancelled()) {\n          return;\n        }\n        this.addSubscription();\n        return yield ExponentFileSystem.downloadResumableStartAsync(this.url, this._fileUri, this.uuid, this.options, this.resumeData);\n      });\n      function downloadAsync() {\n        return _downloadAsync2.apply(this, arguments);\n      }\n      return downloadAsync;\n    }()\n  }, {\n    key: \"pauseAsync\",\n    value: function () {\n      var _pauseAsync = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.downloadResumablePauseAsync) {\n          throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n        }\n        if (this.isTaskCancelled()) {\n          return {\n            fileUri: this._fileUri,\n            options: this.options,\n            url: this.url\n          };\n        }\n        var pauseResult = yield ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n        this.removeSubscription();\n        if (pauseResult) {\n          this.resumeData = pauseResult.resumeData;\n          return this.savable();\n        } else {\n          throw new Error('Unable to generate a savable pause state');\n        }\n      });\n      function pauseAsync() {\n        return _pauseAsync.apply(this, arguments);\n      }\n      return pauseAsync;\n    }()\n  }, {\n    key: \"resumeAsync\",\n    value: function () {\n      var _resumeAsync = _asyncToGenerator(function* () {\n        if (!ExponentFileSystem.downloadResumableStartAsync) {\n          throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n        }\n        if (this.isTaskCancelled()) {\n          return;\n        }\n        this.addSubscription();\n        return yield ExponentFileSystem.downloadResumableStartAsync(this.url, this.fileUri, this.uuid, this.options, this.resumeData);\n      });\n      function resumeAsync() {\n        return _resumeAsync.apply(this, arguments);\n      }\n      return resumeAsync;\n    }()\n  }, {\n    key: \"savable\",\n    value: function savable() {\n      return {\n        url: this.url,\n        fileUri: this.fileUri,\n        options: this.options,\n        resumeData: this.resumeData\n      };\n    }\n  }]);\n  return DownloadResumable;\n}(FileSystemCancellableNetworkTask);\nvar baseReadAsStringAsync = readAsStringAsync;\nvar baseWriteAsStringAsync = writeAsStringAsync;\nvar baseDeleteAsync = deleteAsync;\nvar baseMoveAsync = moveAsync;\nvar baseCopyAsync = copyAsync;\nexport var StorageAccessFramework;\n(function (StorageAccessFramework) {\n  function getUriForDirectoryInRoot(folderName) {\n    return \"content://com.android.externalstorage.documents/tree/primary:\" + folderName + \"/document/primary:\" + folderName;\n  }\n  StorageAccessFramework.getUriForDirectoryInRoot = getUriForDirectoryInRoot;\n  function requestDirectoryPermissionsAsync() {\n    return _requestDirectoryPermissionsAsync.apply(this, arguments);\n  }\n  function _requestDirectoryPermissionsAsync() {\n    _requestDirectoryPermissionsAsync = _asyncToGenerator(function* () {\n      var initialFileUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.requestDirectoryPermissionsAsync');\n      }\n      return yield ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n    });\n    return _requestDirectoryPermissionsAsync.apply(this, arguments);\n  }\n  StorageAccessFramework.requestDirectoryPermissionsAsync = requestDirectoryPermissionsAsync;\n  function readDirectoryAsync(_x16) {\n    return _readDirectoryAsync2.apply(this, arguments);\n  }\n  function _readDirectoryAsync2() {\n    _readDirectoryAsync2 = _asyncToGenerator(function* (dirUri) {\n      if (!ExponentFileSystem.readSAFDirectoryAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.readDirectoryAsync');\n      }\n      return yield ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n    });\n    return _readDirectoryAsync2.apply(this, arguments);\n  }\n  StorageAccessFramework.readDirectoryAsync = readDirectoryAsync;\n  function makeDirectoryAsync(_x17, _x18) {\n    return _makeDirectoryAsync2.apply(this, arguments);\n  }\n  function _makeDirectoryAsync2() {\n    _makeDirectoryAsync2 = _asyncToGenerator(function* (parentUri, dirName) {\n      if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.makeDirectoryAsync');\n      }\n      return yield ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n    });\n    return _makeDirectoryAsync2.apply(this, arguments);\n  }\n  StorageAccessFramework.makeDirectoryAsync = makeDirectoryAsync;\n  function createFileAsync(_x19, _x20, _x21) {\n    return _createFileAsync.apply(this, arguments);\n  }\n  function _createFileAsync() {\n    _createFileAsync = _asyncToGenerator(function* (parentUri, fileName, mimeType) {\n      if (!ExponentFileSystem.createSAFFileAsync) {\n        throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n      }\n      return yield ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n    });\n    return _createFileAsync.apply(this, arguments);\n  }\n  StorageAccessFramework.createFileAsync = createFileAsync;\n  StorageAccessFramework.writeAsStringAsync = baseWriteAsStringAsync;\n  StorageAccessFramework.readAsStringAsync = baseReadAsStringAsync;\n  StorageAccessFramework.deleteAsync = baseDeleteAsync;\n  StorageAccessFramework.moveAsync = baseMoveAsync;\n  StorageAccessFramework.copyAsync = baseCopyAsync;\n})(StorageAccessFramework || (StorageAccessFramework = {}));","map":{"version":3,"sources":["../src/FileSystem.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ExponentFileSystem from './ExponentFileSystem';\nimport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  FileSystemNetworkTaskProgressCallback,\n  DownloadProgressData,\n  UploadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  ProgressEvent,\n  ReadingOptions,\n  WritingOptions,\n} from './FileSystem.types';\n\nif (!ExponentFileSystem) {\n  console.warn(\n    \"No native ExponentFileSystem module found, are you sure the expo-file-system's module is linked properly?\"\n  );\n}\n// Prevent webpack from pruning this.\nconst _unused = new EventEmitter(ExponentFileSystem); // eslint-disable-line\n\nexport {\n  DownloadOptions,\n  DownloadPauseState,\n  DownloadProgressCallback,\n  DownloadProgressData,\n  DownloadResult,\n  EncodingType,\n  FileInfo,\n  FileSystemDownloadResult,\n  FileSystemRequestDirectoryPermissionsResult,\n  FileSystemAcceptedUploadHttpMethod,\n  FileSystemSessionType,\n  FileSystemUploadOptions,\n  FileSystemUploadResult,\n  FileSystemUploadType,\n  FileSystemNetworkTaskProgressCallback,\n  ReadingOptions,\n  WritingOptions,\n};\n\nfunction normalizeEndingSlash(p: string | null): string | null {\n  if (p != null) {\n    return p.replace(/\\/*$/, '') + '/';\n  }\n  return null;\n}\n\nexport const documentDirectory = normalizeEndingSlash(ExponentFileSystem.documentDirectory);\nexport const cacheDirectory = normalizeEndingSlash(ExponentFileSystem.cacheDirectory);\n\nexport const { bundledAssets, bundleDirectory } = ExponentFileSystem;\n\nexport async function getInfoAsync(\n  fileUri: string,\n  options: { md5?: boolean; size?: boolean } = {}\n): Promise<FileInfo> {\n  if (!ExponentFileSystem.getInfoAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getInfoAsync');\n  }\n  return await ExponentFileSystem.getInfoAsync(fileUri, options);\n}\n\nexport async function readAsStringAsync(\n  fileUri: string,\n  options?: ReadingOptions\n): Promise<string> {\n  if (!ExponentFileSystem.readAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readAsStringAsync');\n  }\n  return await ExponentFileSystem.readAsStringAsync(fileUri, options || {});\n}\n\nexport async function getContentUriAsync(fileUri: string): Promise<string> {\n  if (Platform.OS === 'android') {\n    if (!ExponentFileSystem.getContentUriAsync) {\n      throw new UnavailabilityError('expo-file-system', 'getContentUriAsync');\n    }\n    return await ExponentFileSystem.getContentUriAsync(fileUri);\n  } else {\n    return new Promise(function (resolve, reject) {\n      resolve(fileUri);\n    });\n  }\n}\n\nexport async function writeAsStringAsync(\n  fileUri: string,\n  contents: string,\n  options: WritingOptions = {}\n): Promise<void> {\n  if (!ExponentFileSystem.writeAsStringAsync) {\n    throw new UnavailabilityError('expo-file-system', 'writeAsStringAsync');\n  }\n  return await ExponentFileSystem.writeAsStringAsync(fileUri, contents, options);\n}\n\nexport async function deleteAsync(\n  fileUri: string,\n  options: { idempotent?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.deleteAsync) {\n    throw new UnavailabilityError('expo-file-system', 'deleteAsync');\n  }\n  return await ExponentFileSystem.deleteAsync(fileUri, options);\n}\n\nexport async function deleteLegacyDocumentDirectoryAndroid(): Promise<void> {\n  if (Platform.OS !== 'android' || documentDirectory == null) {\n    return;\n  }\n  const legacyDocumentDirectory = `${documentDirectory}ExperienceData/`;\n  return await deleteAsync(legacyDocumentDirectory, { idempotent: true });\n}\n\nexport async function moveAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.moveAsync) {\n    throw new UnavailabilityError('expo-file-system', 'moveAsync');\n  }\n  return await ExponentFileSystem.moveAsync(options);\n}\n\nexport async function copyAsync(options: { from: string; to: string }): Promise<void> {\n  if (!ExponentFileSystem.copyAsync) {\n    throw new UnavailabilityError('expo-file-system', 'copyAsync');\n  }\n  return await ExponentFileSystem.copyAsync(options);\n}\n\nexport async function makeDirectoryAsync(\n  fileUri: string,\n  options: { intermediates?: boolean } = {}\n): Promise<void> {\n  if (!ExponentFileSystem.makeDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'makeDirectoryAsync');\n  }\n  return await ExponentFileSystem.makeDirectoryAsync(fileUri, options);\n}\n\nexport async function readDirectoryAsync(fileUri: string): Promise<string[]> {\n  if (!ExponentFileSystem.readDirectoryAsync) {\n    throw new UnavailabilityError('expo-file-system', 'readDirectoryAsync');\n  }\n  return await ExponentFileSystem.readDirectoryAsync(fileUri, {});\n}\n\nexport async function getFreeDiskStorageAsync(): Promise<number> {\n  if (!ExponentFileSystem.getFreeDiskStorageAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getFreeDiskStorageAsync');\n  }\n  return await ExponentFileSystem.getFreeDiskStorageAsync();\n}\n\nexport async function getTotalDiskCapacityAsync(): Promise<number> {\n  if (!ExponentFileSystem.getTotalDiskCapacityAsync) {\n    throw new UnavailabilityError('expo-file-system', 'getTotalDiskCapacityAsync');\n  }\n  return await ExponentFileSystem.getTotalDiskCapacityAsync();\n}\n\nexport async function downloadAsync(\n  uri: string,\n  fileUri: string,\n  options: DownloadOptions = {}\n): Promise<FileSystemDownloadResult> {\n  if (!ExponentFileSystem.downloadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'downloadAsync');\n  }\n\n  return await ExponentFileSystem.downloadAsync(uri, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    ...options,\n  });\n}\n\nexport async function uploadAsync(\n  url: string,\n  fileUri: string,\n  options: FileSystemUploadOptions = {}\n): Promise<FileSystemUploadResult> {\n  if (!ExponentFileSystem.uploadAsync) {\n    throw new UnavailabilityError('expo-file-system', 'uploadAsync');\n  }\n\n  return await ExponentFileSystem.uploadAsync(url, fileUri, {\n    sessionType: FileSystemSessionType.BACKGROUND,\n    uploadType: FileSystemUploadType.BINARY_CONTENT,\n    ...options,\n    httpMethod: (options.httpMethod || 'POST').toUpperCase(),\n  });\n}\n\nexport function createDownloadResumable(\n  uri: string,\n  fileUri: string,\n  options?: DownloadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n  resumeData?: string\n): DownloadResumable {\n  return new DownloadResumable(uri, fileUri, options, callback, resumeData);\n}\n\nexport function createUploadTask(\n  url: string,\n  fileUri: string,\n  options?: FileSystemUploadOptions,\n  callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n): UploadTask {\n  return new UploadTask(url, fileUri, options, callback);\n}\n\nexport abstract class FileSystemCancellableNetworkTask<\n  T extends DownloadProgressData | UploadProgressData\n> {\n  private _uuid = uuidv4();\n  protected taskWasCanceled = false;\n  private emitter = new EventEmitter(ExponentFileSystem);\n  private subscription?: Subscription | null;\n\n  public async cancelAsync(): Promise<void> {\n    if (!ExponentFileSystem.networkTaskCancelAsync) {\n      throw new UnavailabilityError('expo-file-system', 'networkTaskCancelAsync');\n    }\n\n    this.removeSubscription();\n    this.taskWasCanceled = true;\n    return await ExponentFileSystem.networkTaskCancelAsync(this.uuid);\n  }\n\n  protected isTaskCancelled(): boolean {\n    if (this.taskWasCanceled) {\n      console.warn('This task was already canceled.');\n      return true;\n    }\n\n    return false;\n  }\n\n  protected get uuid(): string {\n    return this._uuid;\n  }\n\n  protected abstract getEventName(): string;\n\n  protected abstract getCallback(): FileSystemNetworkTaskProgressCallback<T> | undefined;\n\n  protected addSubscription() {\n    if (this.subscription) {\n      return;\n    }\n\n    this.subscription = this.emitter.addListener(this.getEventName(), (event: ProgressEvent<T>) => {\n      if (event.uuid === this.uuid) {\n        const callback = this.getCallback();\n        if (callback) {\n          callback(event.data);\n        }\n      }\n    });\n  }\n\n  protected removeSubscription() {\n    if (!this.subscription) {\n      return;\n    }\n    this.emitter.removeSubscription(this.subscription);\n    this.subscription = null;\n  }\n}\n\nexport class UploadTask extends FileSystemCancellableNetworkTask<UploadProgressData> {\n  private options: FileSystemUploadOptions;\n\n  constructor(\n    private url: string,\n    private fileUri: string,\n    options?: FileSystemUploadOptions,\n    private callback?: FileSystemNetworkTaskProgressCallback<UploadProgressData>\n  ) {\n    super();\n\n    const httpMethod = (options?.httpMethod?.toUpperCase() ||\n      'POST') as FileSystemAcceptedUploadHttpMethod;\n\n    this.options = {\n      sessionType: FileSystemSessionType.BACKGROUND,\n      uploadType: FileSystemUploadType.BINARY_CONTENT,\n      ...options,\n      httpMethod,\n    };\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.uploadProgress';\n  }\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<UploadProgressData> | undefined {\n    return this.callback;\n  }\n\n  public async uploadAsync(): Promise<FileSystemUploadResult | undefined> {\n    if (!ExponentFileSystem.uploadTaskStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'uploadTaskStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    const result = await ExponentFileSystem.uploadTaskStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options\n    );\n    this.removeSubscription();\n\n    return result;\n  }\n}\n\nexport class DownloadResumable extends FileSystemCancellableNetworkTask<DownloadProgressData> {\n  constructor(\n    private url: string,\n    private _fileUri: string,\n    private options: DownloadOptions = {},\n    private callback?: FileSystemNetworkTaskProgressCallback<DownloadProgressData>,\n    private resumeData?: string\n  ) {\n    super();\n  }\n\n  public get fileUri(): string {\n    return this._fileUri;\n  }\n\n  protected getEventName(): string {\n    return 'expo-file-system.downloadProgress';\n  }\n\n  protected getCallback(): FileSystemNetworkTaskProgressCallback<DownloadProgressData> | undefined {\n    return this.callback;\n  }\n\n  async downloadAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this._fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  async pauseAsync(): Promise<DownloadPauseState> {\n    if (!ExponentFileSystem.downloadResumablePauseAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumablePauseAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return {\n        fileUri: this._fileUri,\n        options: this.options,\n        url: this.url,\n      };\n    }\n\n    const pauseResult = await ExponentFileSystem.downloadResumablePauseAsync(this.uuid);\n    this.removeSubscription();\n    if (pauseResult) {\n      this.resumeData = pauseResult.resumeData;\n      return this.savable();\n    } else {\n      throw new Error('Unable to generate a savable pause state');\n    }\n  }\n\n  async resumeAsync(): Promise<FileSystemDownloadResult | undefined> {\n    if (!ExponentFileSystem.downloadResumableStartAsync) {\n      throw new UnavailabilityError('expo-file-system', 'downloadResumableStartAsync');\n    }\n\n    if (this.isTaskCancelled()) {\n      return;\n    }\n\n    this.addSubscription();\n    return await ExponentFileSystem.downloadResumableStartAsync(\n      this.url,\n      this.fileUri,\n      this.uuid,\n      this.options,\n      this.resumeData\n    );\n  }\n\n  savable(): DownloadPauseState {\n    return {\n      url: this.url,\n      fileUri: this.fileUri,\n      options: this.options,\n      resumeData: this.resumeData,\n    };\n  }\n}\n\nconst baseReadAsStringAsync = readAsStringAsync;\nconst baseWriteAsStringAsync = writeAsStringAsync;\nconst baseDeleteAsync = deleteAsync;\nconst baseMoveAsync = moveAsync;\nconst baseCopyAsync = copyAsync;\n/**\n * Android only\n */\nexport namespace StorageAccessFramework {\n  export function getUriForDirectoryInRoot(folderName: string) {\n    return `content://com.android.externalstorage.documents/tree/primary:${folderName}/document/primary:${folderName}`;\n  }\n\n  export async function requestDirectoryPermissionsAsync(\n    initialFileUrl: string | null = null\n  ): Promise<FileSystemRequestDirectoryPermissionsResult> {\n    if (!ExponentFileSystem.requestDirectoryPermissionsAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.requestDirectoryPermissionsAsync'\n      );\n    }\n\n    return await ExponentFileSystem.requestDirectoryPermissionsAsync(initialFileUrl);\n  }\n\n  export async function readDirectoryAsync(dirUri: string): Promise<string[]> {\n    if (!ExponentFileSystem.readSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.readDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.readSAFDirectoryAsync(dirUri, {});\n  }\n\n  export async function makeDirectoryAsync(parentUri: string, dirName: string): Promise<string> {\n    if (!ExponentFileSystem.makeSAFDirectoryAsync) {\n      throw new UnavailabilityError(\n        'expo-file-system',\n        'StorageAccessFramework.makeDirectoryAsync'\n      );\n    }\n    return await ExponentFileSystem.makeSAFDirectoryAsync(parentUri, dirName);\n  }\n\n  export async function createFileAsync(\n    parentUri: string,\n    fileName: string,\n    mimeType: string\n  ): Promise<string> {\n    if (!ExponentFileSystem.createSAFFileAsync) {\n      throw new UnavailabilityError('expo-file-system', 'StorageAccessFramework.createFileAsync');\n    }\n    return await ExponentFileSystem.createSAFFileAsync(parentUri, fileName, mimeType);\n  }\n\n  export const writeAsStringAsync = baseWriteAsStringAsync;\n  export const readAsStringAsync = baseReadAsStringAsync;\n  export const deleteAsync = baseDeleteAsync;\n  export const moveAsync = baseMoveAsync;\n  export const copyAsync = baseCopyAsync;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}