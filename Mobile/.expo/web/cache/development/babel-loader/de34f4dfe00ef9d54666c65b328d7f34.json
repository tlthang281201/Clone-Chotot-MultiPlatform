{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TabBarItem from \"./TabBarItem\";\nimport TabBarIndicator from \"./TabBarIndicator\";\nimport useAnimatedValue from \"./useAnimatedValue\";\nvar Separator = function Separator(_ref) {\n  var width = _ref.width;\n  return React.createElement(View, {\n    style: {\n      width: width\n    }\n  });\n};\nvar getFlattenedTabWidth = function getFlattenedTabWidth(style) {\n  var tabStyle = StyleSheet.flatten(style);\n  return tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width;\n};\nvar getComputedTabWidth = function getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        var width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n  if (scrollEnabled) {\n    return layout.width / 5 * 2;\n  }\n  return layout.width / routes.length;\n};\nvar getMaxScrollDistance = function getMaxScrollDistance(tabBarWidth, layoutWidth) {\n  return tabBarWidth - layoutWidth;\n};\nvar getTranslateX = function getTranslateX(scrollAmount, maxScrollDistance) {\n  return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1)) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n};\nvar getTabBarWidth = function getTabBarWidth(_ref2) {\n  var navigationState = _ref2.navigationState,\n    layout = _ref2.layout,\n    gap = _ref2.gap,\n    scrollEnabled = _ref2.scrollEnabled,\n    flattenedTabWidth = _ref2.flattenedTabWidth,\n    tabWidths = _ref2.tabWidths;\n  var routes = navigationState.routes;\n  return routes.reduce(function (acc, _, i) {\n    return acc + (i > 0 ? gap != null ? gap : 0 : 0) + getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n  }, 0);\n};\nvar normalizeScrollValue = function normalizeScrollValue(_ref3) {\n  var layout = _ref3.layout,\n    navigationState = _ref3.navigationState,\n    gap = _ref3.gap,\n    scrollEnabled = _ref3.scrollEnabled,\n    tabWidths = _ref3.tabWidths,\n    value = _ref3.value,\n    flattenedTabWidth = _ref3.flattenedTabWidth;\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    return maxDistance - scrollValue;\n  }\n  return scrollValue;\n};\nvar getScrollAmount = function getScrollAmount(_ref4) {\n  var layout = _ref4.layout,\n    navigationState = _ref4.navigationState,\n    gap = _ref4.gap,\n    scrollEnabled = _ref4.scrollEnabled,\n    flattenedTabWidth = _ref4.flattenedTabWidth,\n    tabWidths = _ref4.tabWidths;\n  var centerDistance = Array.from({\n    length: navigationState.index + 1\n  }).reduce(function (total, _, i) {\n    var tabWidth = getComputedTabWidth(i, layout, navigationState.routes, scrollEnabled, tabWidths, flattenedTabWidth);\n\n    return total + (navigationState.index === i ? (tabWidth + (gap != null ? gap : 0)) / 2 : tabWidth + (gap != null ? gap : 0));\n  }, 0);\n  var scrollAmount = centerDistance - layout.width / 2;\n  return normalizeScrollValue({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    value: scrollAmount,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n};\nvar getLabelTextDefault = function getLabelTextDefault(_ref5) {\n  var route = _ref5.route;\n  return route.title;\n};\nvar getAccessibleDefault = function getAccessibleDefault(_ref6) {\n  var route = _ref6.route;\n  return typeof route.accessible !== 'undefined' ? route.accessible : true;\n};\nvar getAccessibilityLabelDefault = function getAccessibilityLabelDefault(_ref7) {\n  var route = _ref7.route;\n  return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n};\nvar renderIndicatorDefault = function renderIndicatorDefault(props) {\n  return React.createElement(TabBarIndicator, props);\n};\nvar getTestIdDefault = function getTestIdDefault(_ref8) {\n  var route = _ref8.route;\n  return route.testID;\n};\nexport default function TabBar(_ref9) {\n  var _ref9$getLabelText = _ref9.getLabelText,\n    getLabelText = _ref9$getLabelText === void 0 ? getLabelTextDefault : _ref9$getLabelText,\n    _ref9$getAccessible = _ref9.getAccessible,\n    getAccessible = _ref9$getAccessible === void 0 ? getAccessibleDefault : _ref9$getAccessible,\n    _ref9$getAccessibilit = _ref9.getAccessibilityLabel,\n    getAccessibilityLabel = _ref9$getAccessibilit === void 0 ? getAccessibilityLabelDefault : _ref9$getAccessibilit,\n    _ref9$getTestID = _ref9.getTestID,\n    getTestID = _ref9$getTestID === void 0 ? getTestIdDefault : _ref9$getTestID,\n    _ref9$renderIndicator = _ref9.renderIndicator,\n    renderIndicator = _ref9$renderIndicator === void 0 ? renderIndicatorDefault : _ref9$renderIndicator,\n    _ref9$gap = _ref9.gap,\n    gap = _ref9$gap === void 0 ? 0 : _ref9$gap,\n    scrollEnabled = _ref9.scrollEnabled,\n    jumpTo = _ref9.jumpTo,\n    navigationState = _ref9.navigationState,\n    position = _ref9.position,\n    activeColor = _ref9.activeColor,\n    bounces = _ref9.bounces,\n    contentContainerStyle = _ref9.contentContainerStyle,\n    inactiveColor = _ref9.inactiveColor,\n    indicatorContainerStyle = _ref9.indicatorContainerStyle,\n    indicatorStyle = _ref9.indicatorStyle,\n    labelStyle = _ref9.labelStyle,\n    onTabLongPress = _ref9.onTabLongPress,\n    onTabPress = _ref9.onTabPress,\n    pressColor = _ref9.pressColor,\n    pressOpacity = _ref9.pressOpacity,\n    renderBadge = _ref9.renderBadge,\n    renderIcon = _ref9.renderIcon,\n    renderLabel = _ref9.renderLabel,\n    renderTabBarItem = _ref9.renderTabBarItem,\n    style = _ref9.style,\n    tabStyle = _ref9.tabStyle;\n  var _React$useState = React.useState({\n      width: 0,\n      height: 0\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var _React$useState3 = React.useState({}),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    tabWidths = _React$useState4[0],\n    setTabWidths = _React$useState4[1];\n  var flatListRef = React.useRef(null);\n  var isFirst = React.useRef(true);\n  var scrollAmount = useAnimatedValue(0);\n  var measuredTabWidths = React.useRef({});\n  var routes = navigationState.routes;\n  var flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  var isWidthDynamic = flattenedTabWidth === 'auto';\n  var scrollOffset = getScrollAmount({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var hasMeasuredTabWidths = Boolean(layout.width) && routes.every(function (r) {\n    return typeof tabWidths[r.key] === 'number';\n  });\n  React.useEffect(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n    if (scrollEnabled) {\n      var _flatListRef$current;\n      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToOffset({\n        offset: scrollOffset,\n        animated: true\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      return layout.width === width && layout.height === height ? layout : {\n        width: width,\n        height: height\n      };\n    });\n  };\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  var separatorPercent = separatorsWidth / tabBarWidth * 100;\n  var tabBarWidthPercent = routes.length * 40 + \"%\";\n  var translateX = React.useMemo(function () {\n    return getTranslateX(scrollAmount, getMaxScrollDistance(tabBarWidth, layout.width));\n  }, [layout.width, scrollAmount, tabBarWidth]);\n  var renderItem = React.useCallback(function (_ref10) {\n    var route = _ref10.item,\n      index = _ref10.index;\n    var props = {\n      key: route.key,\n      position: position,\n      route: route,\n      navigationState: navigationState,\n      getAccessibilityLabel: getAccessibilityLabel,\n      getAccessible: getAccessible,\n      getLabelText: getLabelText,\n      getTestID: getTestID,\n      renderBadge: renderBadge,\n      renderIcon: renderIcon,\n      renderLabel: renderLabel,\n      activeColor: activeColor,\n      inactiveColor: inactiveColor,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      onLayout: isWidthDynamic ? function (e) {\n        measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n        if (routes.every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        }\n      } : undefined,\n      onPress: function onPress() {\n        var event = {\n          route: route,\n          defaultPrevented: false,\n          preventDefault: function preventDefault() {\n            event.defaultPrevented = true;\n          }\n        };\n        onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n        if (event.defaultPrevented) {\n          return;\n        }\n        jumpTo(route.key);\n      },\n      onLongPress: function onLongPress() {\n        return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n          route: route\n        });\n      },\n      labelStyle: labelStyle,\n      style: tabStyle,\n      defaultTabWidth: !isWidthDynamic ? getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, getFlattenedTabWidth(tabStyle)) : undefined\n    };\n    return React.createElement(React.Fragment, null, gap > 0 && index > 0 ? React.createElement(Separator, {\n      width: gap\n    }) : null, renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props));\n  }, [activeColor, gap, getAccessibilityLabel, getAccessible, getLabelText, getTestID, inactiveColor, isWidthDynamic, jumpTo, labelStyle, layout, navigationState, onTabLongPress, onTabPress, position, pressColor, pressOpacity, renderBadge, renderIcon, renderLabel, renderTabBarItem, routes, scrollEnabled, tabStyle, tabWidths]);\n  var keyExtractor = React.useCallback(function (item) {\n    return item.key;\n  }, []);\n  var contentContainerStyleMemoized = React.useMemo(function () {\n    return [styles.tabContent, scrollEnabled ? {\n      width: tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent\n    } : styles.container, contentContainerStyle];\n  }, [contentContainerStyle, scrollEnabled, separatorsWidth, tabBarWidth, tabBarWidthPercent]);\n  var handleScroll = React.useMemo(function () {\n    return Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: scrollAmount\n        }\n      }\n    }], {\n      useNativeDriver: true\n    });\n  }, [scrollAmount]);\n  return React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [styles.tabBar, style]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.indicatorContainer, scrollEnabled ? {\n      transform: [{\n        translateX: translateX\n      }]\n    } : null, tabBarWidth > separatorsWidth ? {\n      width: tabBarWidth - separatorsWidth\n    } : scrollEnabled ? {\n      width: tabBarWidthPercent\n    } : null, indicatorContainerStyle]\n  }, renderIndicator({\n    position: position,\n    layout: layout,\n    navigationState: navigationState,\n    jumpTo: jumpTo,\n    width: isWidthDynamic ? 'auto' : (100 - separatorPercent) / routes.length + \"%\",\n    style: indicatorStyle,\n    getTabWidth: function getTabWidth(i) {\n      return getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    },\n    gap: gap\n  })), React.createElement(View, {\n    style: styles.scroll\n  }, React.createElement(Animated.FlatList, {\n    data: routes,\n    keyExtractor: keyExtractor,\n    horizontal: true,\n    accessibilityRole: \"tablist\",\n    keyboardShouldPersistTaps: \"handled\",\n    scrollEnabled: scrollEnabled,\n    bounces: bounces,\n    alwaysBounceHorizontal: false,\n    scrollsToTop: false,\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    automaticallyAdjustContentInsets: false,\n    overScrollMode: \"never\",\n    contentContainerStyle: contentContainerStyleMemoized,\n    scrollEventThrottle: 16,\n    renderItem: renderItem,\n    onScroll: handleScroll,\n    ref: flatListRef\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["TabBar.tsx"],"names":["React","TabBarItem","TabBarIndicator","useAnimatedValue","Separator","width","getFlattenedTabWidth","style","tabStyle","StyleSheet","flatten","getComputedTabWidth","index","layout","routes","scrollEnabled","tabWidths","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","getMaxScrollDistance","tabBarWidth","layoutWidth","getTranslateX","scrollAmount","maxScrollDistance","Animated","multiply","Platform","OS","I18nManager","isRTL","add","getTabBarWidth","navigationState","gap","flattenedTabWidth","reduce","acc","_","i","normalizeScrollValue","value","maxDistance","scrollValue","Math","max","min","getScrollAmount","centerDistance","from","total","tabWidth","getLabelTextDefault","route","title","getAccessibleDefault","accessible","getAccessibilityLabelDefault","accessibilityLabel","undefined","renderIndicatorDefault","props","getTestIdDefault","testID","TabBar","getLabelText","getAccessible","getAccessibilityLabel","getTestID","renderIndicator","jumpTo","position","activeColor","bounces","contentContainerStyle","inactiveColor","indicatorContainerStyle","indicatorStyle","labelStyle","onTabLongPress","onTabPress","pressColor","pressOpacity","renderBadge","renderIcon","renderLabel","renderTabBarItem","setLayout","useState","height","setTabWidths","flatListRef","useRef","isFirst","measuredTabWidths","isWidthDynamic","scrollOffset","hasMeasuredTabWidths","Boolean","every","r","useEffect","current","scrollToOffset","offset","animated","handleLayout","e","nativeEvent","separatorsWidth","separatorPercent","tabBarWidthPercent","translateX","useMemo","renderItem","useCallback","item","onLayout","onPress","event","defaultPrevented","preventDefault","onLongPress","defaultTabWidth","keyExtractor","contentContainerStyleMemoized","styles","tabContent","container","handleScroll","contentOffset","x","useNativeDriver","tabBar","indicatorContainer","transform","getTabWidth","scroll","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  FlatList,\n  ListRenderItemInfo,\n} from 'react-native';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport type {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\nimport useAnimatedValue from './useAnimatedValue';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText?: (scene: Scene<T>) => string | undefined;\n  getAccessible?: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel?: (scene: Scene<T>) => string | undefined;\n  getTestID?: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator?: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gap?: number;\n};\n\ntype FlattenedTabWidth = string | number | undefined;\n\nconst Separator = ({ width }: { width: number }) => {\n  return <View style={{ width }} />;\n};\n\nconst getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n  const tabStyle = StyleSheet.flatten(style);\n\n  return tabStyle?.width;\n};\n\nconst getComputedTabWidth = (\n  index: number,\n  layout: Layout,\n  routes: Route[],\n  scrollEnabled: boolean | undefined,\n  tabWidths: { [key: string]: number },\n  flattenedWidth: FlattenedTabWidth\n) => {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        const width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n\n  if (scrollEnabled) {\n    return (layout.width / 5) * 2;\n  }\n  return layout.width / routes.length;\n};\n\nconst getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n  tabBarWidth - layoutWidth;\n\nconst getTranslateX = (\n  scrollAmount: Animated.Value,\n  maxScrollDistance: number\n) =>\n  Animated.multiply(\n    Platform.OS === 'android' && I18nManager.isRTL\n      ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n      : scrollAmount,\n    I18nManager.isRTL ? 1 : -1\n  );\n\nconst getTabBarWidth = <T extends Route>({\n  navigationState,\n  layout,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'navigationState' | 'gap' | 'layout' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const { routes } = navigationState;\n\n  return routes.reduce<number>(\n    (acc, _, i) =>\n      acc +\n      (i > 0 ? gap ?? 0 : 0) +\n      getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedTabWidth\n      ),\n    0\n  );\n};\n\nconst normalizeScrollValue = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  tabWidths,\n  value,\n  flattenedTabWidth,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'gap' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  value: number;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n  const maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    // On Android, scroll value is not applied in reverse in RTL\n    // so we need to manually adjust it to apply correct value\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nconst getScrollAmount = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'scrollEnabled' | 'gap'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const centerDistance = Array.from({\n    length: navigationState.index + 1,\n  }).reduce<number>((total, _, i) => {\n    const tabWidth = getComputedTabWidth(\n      i,\n      layout,\n      navigationState.routes,\n      scrollEnabled,\n      tabWidths,\n      flattenedTabWidth\n    );\n\n    // To get the current index centered we adjust scroll amount by width of indexes\n    // 0 through (i - 1) and add half the width of current index i\n    return (\n      total +\n      (navigationState.index === i\n        ? (tabWidth + (gap ?? 0)) / 2\n        : tabWidth + (gap ?? 0))\n    );\n  }, 0);\n\n  const scrollAmount = centerDistance - layout.width / 2;\n\n  return normalizeScrollValue({\n    layout,\n    navigationState,\n    tabWidths,\n    value: scrollAmount,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n};\n\nconst getLabelTextDefault = ({ route }: Scene<Route>) => route.title;\n\nconst getAccessibleDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessible !== 'undefined' ? route.accessible : true;\n\nconst getAccessibilityLabelDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessibilityLabel === 'string'\n    ? route.accessibilityLabel\n    : typeof route.title === 'string'\n    ? route.title\n    : undefined;\n\nconst renderIndicatorDefault = (props: IndicatorProps<Route>) => (\n  <TabBarIndicator {...props} />\n);\n\nconst getTestIdDefault = ({ route }: Scene<Route>) => route.testID;\n\nexport default function TabBar<T extends Route>({\n  getLabelText = getLabelTextDefault,\n  getAccessible = getAccessibleDefault,\n  getAccessibilityLabel = getAccessibilityLabelDefault,\n  getTestID = getTestIdDefault,\n  renderIndicator = renderIndicatorDefault,\n  gap = 0,\n  scrollEnabled,\n  jumpTo,\n  navigationState,\n  position,\n  activeColor,\n  bounces,\n  contentContainerStyle,\n  inactiveColor,\n  indicatorContainerStyle,\n  indicatorStyle,\n  labelStyle,\n  onTabLongPress,\n  onTabPress,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  renderLabel,\n  renderTabBarItem,\n  style,\n  tabStyle,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState<Layout>({ width: 0, height: 0 });\n  const [tabWidths, setTabWidths] = React.useState<Record<string, number>>({});\n  const flatListRef = React.useRef<FlatList>(null);\n  const isFirst = React.useRef(true);\n  const scrollAmount = useAnimatedValue(0);\n  const measuredTabWidths = React.useRef<Record<string, number>>({});\n\n  const { routes } = navigationState;\n  const flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  const isWidthDynamic = flattenedTabWidth === 'auto';\n  const scrollOffset = getScrollAmount({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const hasMeasuredTabWidths =\n    Boolean(layout.width) &&\n    routes.every((r) => typeof tabWidths[r.key] === 'number');\n\n  React.useEffect(() => {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n      return;\n    }\n\n    if (scrollEnabled) {\n      flatListRef.current?.scrollToOffset({\n        offset: scrollOffset,\n        animated: true,\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) =>\n      layout.width === width && layout.height === height\n        ? layout\n        : { width, height }\n    );\n  };\n\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  const separatorPercent = (separatorsWidth / tabBarWidth) * 100;\n  const tabBarWidthPercent = `${routes.length * 40}%`;\n\n  const translateX = React.useMemo(\n    () =>\n      getTranslateX(\n        scrollAmount,\n        getMaxScrollDistance(tabBarWidth, layout.width)\n      ),\n    [layout.width, scrollAmount, tabBarWidth]\n  );\n\n  const renderItem = React.useCallback(\n    ({ item: route, index }: ListRenderItemInfo<T>) => {\n      const props: TabBarItemProps<T> & { key: string } = {\n        key: route.key,\n        position: position,\n        route: route,\n        navigationState: navigationState,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessible: getAccessible,\n        getLabelText: getLabelText,\n        getTestID: getTestID,\n        renderBadge: renderBadge,\n        renderIcon: renderIcon,\n        renderLabel: renderLabel,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor,\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        onLayout: isWidthDynamic\n          ? (e: LayoutChangeEvent) => {\n              measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n              // When we have measured widths for all of the tabs, we should updates the state\n              // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n              if (\n                routes.every(\n                  (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                )\n              ) {\n                setTabWidths({ ...measuredTabWidths.current });\n              }\n            }\n          : undefined,\n        onPress: () => {\n          const event: Scene<T> & Event = {\n            route,\n            defaultPrevented: false,\n            preventDefault: () => {\n              event.defaultPrevented = true;\n            },\n          };\n\n          onTabPress?.(event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          jumpTo(route.key);\n        },\n        onLongPress: () => onTabLongPress?.({ route }),\n        labelStyle: labelStyle,\n        style: tabStyle,\n        // Calculate the deafult width for tab for FlatList to work\n        defaultTabWidth: !isWidthDynamic\n          ? getComputedTabWidth(\n              index,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              getFlattenedTabWidth(tabStyle)\n            )\n          : undefined,\n      };\n\n      return (\n        <>\n          {gap > 0 && index > 0 ? <Separator width={gap} /> : null}\n          {renderTabBarItem ? (\n            renderTabBarItem(props)\n          ) : (\n            <TabBarItem {...props} />\n          )}\n        </>\n      );\n    },\n    [\n      activeColor,\n      gap,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      inactiveColor,\n      isWidthDynamic,\n      jumpTo,\n      labelStyle,\n      layout,\n      navigationState,\n      onTabLongPress,\n      onTabPress,\n      position,\n      pressColor,\n      pressOpacity,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      routes,\n      scrollEnabled,\n      tabStyle,\n      tabWidths,\n    ]\n  );\n\n  const keyExtractor = React.useCallback((item: T) => item.key, []);\n\n  const contentContainerStyleMemoized = React.useMemo(\n    () => [\n      styles.tabContent,\n      scrollEnabled\n        ? {\n            width:\n              tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent,\n          }\n        : styles.container,\n      contentContainerStyle,\n    ],\n    [\n      contentContainerStyle,\n      scrollEnabled,\n      separatorsWidth,\n      tabBarWidth,\n      tabBarWidthPercent,\n    ]\n  );\n\n  const handleScroll = React.useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              contentOffset: { x: scrollAmount },\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    [scrollAmount]\n  );\n\n  return (\n    <Animated.View onLayout={handleLayout} style={[styles.tabBar, style]}>\n      <Animated.View\n        pointerEvents=\"none\"\n        style={[\n          styles.indicatorContainer,\n          scrollEnabled ? { transform: [{ translateX }] as any } : null,\n          tabBarWidth > separatorsWidth\n            ? { width: tabBarWidth - separatorsWidth }\n            : scrollEnabled\n            ? { width: tabBarWidthPercent }\n            : null,\n          indicatorContainerStyle,\n        ]}\n      >\n        {renderIndicator({\n          position,\n          layout,\n          navigationState,\n          jumpTo,\n          width: isWidthDynamic\n            ? 'auto'\n            : `${(100 - separatorPercent) / routes.length}%`,\n          style: indicatorStyle,\n          getTabWidth: (i: number) =>\n            getComputedTabWidth(\n              i,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              flattenedTabWidth\n            ),\n          gap,\n        })}\n      </Animated.View>\n      <View style={styles.scroll}>\n        <Animated.FlatList\n          data={routes as Animated.WithAnimatedValue<T>[]}\n          keyExtractor={keyExtractor}\n          horizontal\n          accessibilityRole=\"tablist\"\n          keyboardShouldPersistTaps=\"handled\"\n          scrollEnabled={scrollEnabled}\n          bounces={bounces}\n          alwaysBounceHorizontal={false}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          automaticallyAdjustContentInsets={false}\n          overScrollMode=\"never\"\n          contentContainerStyle={contentContainerStyleMemoized}\n          scrollEventThrottle={16}\n          renderItem={renderItem}\n          onScroll={handleScroll}\n          ref={flatListRef}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}