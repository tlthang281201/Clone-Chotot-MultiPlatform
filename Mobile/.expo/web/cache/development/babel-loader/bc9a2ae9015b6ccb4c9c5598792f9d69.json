{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { HybridContext } from \"./../hybrid-overlay/Context\";\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nexport var useColorMode = function useColorMode() {\n  var _React$useContext = React.useContext(HybridContext),\n    colorModeContext = _React$useContext.colorMode;\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === 'dark' ? dark : light;\n}\nexport function useModeManager(initialColorMode, useSystemColorMode, colorModeManager) {\n  var systemColorMode = useColorScheme();\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n  var _useState = useState(initialColorMode),\n    _useState2 = _slicedToArray(_useState, 2),\n    colorMode = _useState2[0],\n    setRawMode = _useState2[1];\n  var setColorMode = React.useCallback(function () {\n    var _ref = _asyncToGenerator(function* (val) {\n      if (colorModeManager) {\n        yield colorModeManager.set(val);\n      }\n      setRawMode(val);\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [colorModeManager]);\n\n  useEffect(function () {\n    if (colorModeManager) {\n      (function () {\n        var _getMode = _asyncToGenerator(function* () {\n          var value = yield colorModeManager.get(initialColorMode);\n          if (value && value !== colorMode) {\n            setRawMode(value);\n          }\n        });\n        function getMode() {\n          return _getMode.apply(this, arguments);\n        }\n        return getMode;\n      })()();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  useEffect(function () {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n  return {\n    colorMode: colorMode,\n    setColorMode: setColorMode\n  };\n}\nexport function useAccessibleColors() {\n  var _React$useContext2 = React.useContext(HybridContext),\n    colorModeContext = _React$useContext2.colorMode;\n  var toggleAccessibleColors = function toggleAccessibleColors() {\n    return colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  };\n  return [colorModeContext.accessibleColors, colorModeContext.setAccessibleColors, toggleAccessibleColors];\n}","map":{"version":3,"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAMA,SAASC,aAAT;AAAA;AAIA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAY,GAAiC;EACxD,wBAIIJ,KAAK,CAACK,UAAN,CAAsCF,aAAtC,CAJJ;IACaG,qCAAXC,SAAS;EAIX,IAAID,gBAAgB,KAAKE,SAAzB,EAAoC;IAClC,MAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;EACD;EACD,OAAOH,gBAAP;AACD,CAVM;AAYP,OAAO,SAASI,iBAAT,CAA2BC,KAA3B,EAAuCC,IAAvC,EAAkD;EACvD,oBAAsBR,YAAY,EAAlC;IAAQG;EACR,OAAOA,SAAS,KAAK,MAAd,GAAuBK,IAAvB,GAA8BD,KAArC;AACD;AAED,OAAO,SAASE,cAAT,CACLC,gBADK,EAELC,kBAFK,EAGLC,gBAHK,EAIL;EACA,IAAMC,eAAe,GAAGC,cAAc,EAAtC;EAEA,IAAIH,kBAAJ,EAAwB;IACtBD,gBAAgB,GAAGG,eAAnB;EACD;EAED,gBAAgChB,QAAQ,CAAYa,gBAAZ,CAAxC;IAAA;IAAOP,SAAD;IAAYY,UAAZ;EACN,IAAMC,YAAY,GAAGpB,KAAK,CAACqB,WAAN;IAAA,6BACnB,WAAOC,GAAP,EAA0B;MACxB,IAAIN,gBAAJ,EAAsB;QACpB,MAAMA,gBAAgB,CAACO,GAAjB,CAAqBD,GAArB,CAAN;MACD;MACDH,UAAU,CAACG,GAAD,CAAV;IACD,CANkB;IAAA;MAAA;IAAA;EAAA,KAOnB,CAACN,gBAAD,CAPmB,CAArB;;EAWAd,SAAS,CAAC,YAAM;IACd,IAAIc,gBAAJ,EAAsB;MACpB;QAAA,iCAAC,aAAyB;UACxB,IAAIQ,KAAK,SAASR,gBAAgB,CAACS,GAAjB,CAAqBX,gBAArB,CAAlB;UACA,IAAIU,KAAK,IAAIA,KAAK,KAAKjB,SAAvB,EAAkC;YAChCY,UAAU,CAACK,KAAD,CAAV;UACD;QACF,CALD;QAAA,SAAgBE,OAAf;UAAA;QAAA;QAAA,OAAeA,OAAf;MAAA,MAAD;IAMD;EACF,CATQ,EASN,CAACnB,SAAD,EAAYO,gBAAZ,EAA8BE,gBAA9B,CATM,CAAT;;EAYAd,SAAS,CAAC,YAAM;IACd,IAAI,CAACc,gBAAD,IAAqBD,kBAAzB,EAA6C;MAC3CI,UAAU,CAACF,eAAD,CAAV;IACD;EACF,CAJQ,EAIN,CAACA,eAAD,EAAkBD,gBAAlB,EAAoCD,kBAApC,EAAwDI,UAAxD,CAJM,CAAT;EAMA,OAAO;IAAEZ,SAAF,EAAEA,SAAF;IAAaa;EAAb,CAAP;AACD;AAED,OAAO,SAASO,mBAAT,GAIL;EACA,yBAII3B,KAAK,CAACK,UAAN,CAAsCF,aAAtC,CAJJ;IACaG,sCAAXC,SAAS;EAIX,IAAMqB,sBAAsB,GAAG,SAAzBA,sBAAsB;IAAA,OAC1BtB,gBAAgB,CAACuB,mBAAjB,CAAqC,CAACvB,gBAAgB,CAACwB,gBAAvD,CADF;EAAA;EAEA,OAAO,CACLxB,gBAAgB,CAACwB,gBADZ,EAELxB,gBAAgB,CAACuB,mBAFZ,EAGLD,sBAHK,CAAP;AAKD","names":["React","useState","useEffect","HybridContext","useColorMode","useContext","colorModeContext","colorMode","undefined","Error","useColorModeValue","light","dark","useModeManager","initialColorMode","useSystemColorMode","colorModeManager","systemColorMode","useColorScheme","setRawMode","setColorMode","useCallback","val","set","value","get","getMode","useAccessibleColors","toggleAccessibleColors","setAccessibleColors","accessibleColors"],"sources":["hooks.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport type {\n  ColorMode,\n  StorageManager,\n  IColorModeContextProps,\n} from './types';\nimport { HybridContext } from './../hybrid-overlay/Context';\nimport type { IHybridContextProps } from './../hybrid-overlay/types';\nimport { useColorScheme } from 'react-native';\n\nexport const useColorMode = (): IColorModeContextProps => {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  if (colorModeContext === undefined) {\n    throw new Error('useColorMode must be used within a NativeBaseProvider');\n  }\n  return colorModeContext;\n};\n\nexport function useColorModeValue(light: any, dark: any) {\n  const { colorMode } = useColorMode();\n  return colorMode === 'dark' ? dark : light;\n}\n\nexport function useModeManager(\n  initialColorMode: ColorMode,\n  useSystemColorMode: boolean | undefined,\n  colorModeManager?: StorageManager\n) {\n  const systemColorMode = useColorScheme();\n\n  if (useSystemColorMode) {\n    initialColorMode = systemColorMode;\n  }\n\n  const [colorMode, setRawMode] = useState<ColorMode>(initialColorMode);\n  const setColorMode = React.useCallback(\n    async (val: ColorMode) => {\n      if (colorModeManager) {\n        await colorModeManager.set(val);\n      }\n      setRawMode(val);\n    },\n    [colorModeManager]\n  );\n\n  // For initial setting initial color mode from storage\n  useEffect(() => {\n    if (colorModeManager) {\n      (async function getMode() {\n        let value = await colorModeManager.get(initialColorMode);\n        if (value && value !== colorMode) {\n          setRawMode(value);\n        }\n      })();\n    }\n  }, [colorMode, initialColorMode, colorModeManager]);\n\n  // Set system color mode only when user has not passed a colorModeManager\n  useEffect(() => {\n    if (!colorModeManager && useSystemColorMode) {\n      setRawMode(systemColorMode);\n    }\n  }, [systemColorMode, colorModeManager, useSystemColorMode, setRawMode]);\n\n  return { colorMode, setColorMode };\n}\n\nexport function useAccessibleColors(): [\n  boolean,\n  (val: boolean) => void,\n  () => void\n] {\n  const {\n    colorMode: colorModeContext,\n  }: {\n    colorMode: IColorModeContextProps;\n  } = React.useContext<IHybridContextProps>(HybridContext);\n  const toggleAccessibleColors = () =>\n    colorModeContext.setAccessibleColors(!colorModeContext.accessibleColors);\n  return [\n    colorModeContext.accessibleColors,\n    colorModeContext.setAccessibleColors,\n    toggleAccessibleColors,\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}