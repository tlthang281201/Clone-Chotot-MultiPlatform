{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"isFocusVisible\"],\n  _excluded2 = [\"onValueChange\", \"selectedValue\", \"children\", \"dropdownIcon\", \"dropdownCloseIcon\", \"dropdownOpenIcon\", \"placeholder\", \"accessibilityLabel\", \"defaultValue\", \"_item\", \"_selectedItem\", \"onOpen\", \"onClose\", \"optimized\", \"customDropdownIconProps\", \"_actionSheetContent\", \"_actionSheetBody\", \"_webSelect\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { Actionsheet } from \"../../composites/Actionsheet\";\nimport Box from \"../Box\";\nimport { Input } from \"../Input\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from \"../../../hooks\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { ChevronDownIcon } from \"../Icon/Icons\";\nimport { ScrollView } from \"../../basic/ScrollView\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { FlatList } from \"../../basic/FlatList\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { Pressable } from \"../Pressable\";\nexport var SelectContext = React.createContext({\n  onValueChange: function onValueChange() {},\n  selectedValue: null,\n  _selectedItem: {},\n  _item: {}\n});\nvar Select = function Select(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n    isFocusedProp = _ref2.isFocused,\n    isFocusVisibleProp = _ref2.isFocusVisible,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID\n  });\n  var flatListData = [];\n  var isDisabled = selectProps.disabled;\n  var tempFix = '__NativebasePlaceholder__';\n  var _ref = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isOpen = _React$useState2[0],\n    setIsOpen = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isFocused = _React$useState4[0],\n    setIsFocused = _React$useState4[1];\n  var _useFocusRing = useFocusRing(),\n    focusProps = _useFocusRing.focusProps,\n    isFocusVisible = _useFocusRing.isFocusVisible;\n  var _useHover = useHover({\n      isDisabled: isDisabled\n    }, _ref),\n    hoverProps = _useHover.hoverProps,\n    isHovered = _useHover.isHovered;\n  var _usePropsResolution = usePropsResolution('Select', props, {\n      isDisabled: isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible\n    }, undefined),\n    onValueChange = _usePropsResolution.onValueChange,\n    selectedValue = _usePropsResolution.selectedValue,\n    children = _usePropsResolution.children,\n    dropdownIcon = _usePropsResolution.dropdownIcon,\n    dropdownCloseIcon = _usePropsResolution.dropdownCloseIcon,\n    dropdownOpenIcon = _usePropsResolution.dropdownOpenIcon,\n    placeholder = _usePropsResolution.placeholder,\n    accessibilityLabel = _usePropsResolution.accessibilityLabel,\n    defaultValue = _usePropsResolution.defaultValue,\n    _item = _usePropsResolution._item,\n    _selectedItem = _usePropsResolution._selectedItem,\n    onOpen = _usePropsResolution.onOpen,\n    onClose = _usePropsResolution.onClose,\n    optimized = _usePropsResolution.optimized,\n    customDropdownIconProps = _usePropsResolution.customDropdownIconProps,\n    _actionSheetContent = _usePropsResolution._actionSheetContent,\n    _actionSheetBody = _usePropsResolution._actionSheetBody,\n    _webSelect = _usePropsResolution._webSelect,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _useControllableState = useControllableState({\n      value: selectedValue,\n      defaultValue: defaultValue,\n      onChange: function onChange(newValue) {\n        onValueChange && onValueChange(newValue);\n        setIsOpen(false);\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var itemsList = React.Children.map(children !== null && children !== void 0 ? children : [], function (child) {\n    return {\n      label: child.props.label,\n      value: child.props.value\n    };\n  });\n  var selectedItemArray = itemsList.filter(function (item) {\n    return item.value === value;\n  });\n  var selectedItem = selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n  var contextValue = React.useMemo(function () {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem !== null && _selectedItem !== void 0 ? _selectedItem : {},\n      _item: _item !== null && _item !== void 0 ? _item : {}\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  var rightIcon = isOpen && dropdownOpenIcon ? dropdownOpenIcon : !isOpen && dropdownCloseIcon ? dropdownCloseIcon : dropdownIcon ? dropdownIcon : React.createElement(ChevronDownIcon, customDropdownIconProps);\n  var handleClose = function handleClose() {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n  if (optimized) {\n    React.Children.map(children, function (child) {\n      flatListData.push(child.props);\n    });\n  }\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['shadow', 'opacity'])),\n    _extractInObject2 = _slicedToArray(_extractInObject, 1),\n    layoutProps = _extractInObject2[0];\n  var commonInput = React.createElement(Input, _extends({\n    placeholder: placeholder,\n    InputRightElement: rightIcon\n  }, resolvedProps, {\n    isFocused: isFocused,\n    isHovered: isHovered,\n    \"aria-hidden\": true,\n    importantForAccessibility: \"no\",\n    value: selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.label,\n    editable: false,\n    focusable: false,\n    isDisabled: isDisabled\n  }));\n  return Platform.OS === 'web' ? React.createElement(Box, null, React.createElement(\"select\", _extends({\n    \"aria-readonly\": selectProps.readOnly,\n    required: selectProps.required,\n    disabled: isDisabled\n  }, focusProps, hoverProps, {\n    ref: mergeRefs([ref, _ref]),\n\n    style: _webSelect,\n    onChange: function onChange(e) {\n      setValue(e.target.value);\n    },\n    value: selectedItem === null ? tempFix : value,\n    \"aria-label\": placeholder,\n    onFocus: function onFocus() {\n      setIsFocused(true);\n      onOpen && onOpen();\n    },\n    onBlur: function onBlur() {\n      setIsFocused(false);\n      onClose && onClose();\n    }\n  }), React.createElement(\"option\", {\n    disabled: true,\n    value: tempFix\n  }, placeholder), children), commonInput) : React.createElement(React.Fragment, null, React.createElement(Pressable, _extends({\n    onPress: function onPress() {\n      Keyboard.dismiss();\n      setIsOpen(true);\n      onOpen && onOpen();\n    },\n    disabled: isDisabled,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"button\",\n    ref: mergeRefs([ref, _ref])\n  }, layoutProps), commonInput), React.createElement(Actionsheet, {\n    isOpen: isOpen,\n    onClose: handleClose\n  }, React.createElement(Actionsheet.Content, _actionSheetContent, optimized ? React.createElement(FlatList, _extends({}, _actionSheetBody, {\n    data: flatListData,\n\n    keyExtractor: function keyExtractor(_item, index) {\n      return index.toString();\n    },\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item;\n      var isSelected = selectedValue === item.value;\n      return React.createElement(Actionsheet.Item, _extends({\n        onPress: function onPress() {\n          if (!isDisabled) {\n            setValue(item.value);\n          }\n        },\n        accessibilityState: {\n          selected: isSelected\n        }\n      }, item, _item, isSelected && _selectedItem), item.label);\n    }\n  })) : React.createElement(ScrollView, _actionSheetBody, React.createElement(SelectContext.Provider, {\n    value: contextValue\n  }, children)))));\n};\nexport default memo(forwardRef(Select));","map":{"version":3,"sources":["Select.tsx"],"names":["React","forwardRef","memo","Actionsheet","Box","Input","useFocusRing","useControllableState","usePropsResolution","useHover","mergeRefs","useFormControl","ChevronDownIcon","ScrollView","extractInObject","stylingProps","FlatList","useHasResponsiveProps","Pressable","SelectContext","createContext","onValueChange","selectedValue","_selectedItem","_item","Select","isHovered","isHoveredProp","isFocused","isFocusedProp","isFocusVisible","isFocusVisibleProp","props","ref","selectProps","isDisabled","nativeID","flatListData","disabled","tempFix","_ref","useRef","isOpen","setIsOpen","useState","setIsFocused","focusProps","hoverProps","children","dropdownIcon","dropdownCloseIcon","dropdownOpenIcon","placeholder","accessibilityLabel","defaultValue","onOpen","onClose","optimized","customDropdownIconProps","_actionSheetContent","_actionSheetBody","_webSelect","resolvedProps","undefined","value","setValue","onChange","newValue","itemsList","Children","map","child","label","selectedItemArray","filter","item","selectedItem","length","contextValue","useMemo","rightIcon","handleClose","push","layoutProps","margin","flexbox","position","commonInput","Platform","OS","readOnly","required","e","target","Keyboard","dismiss","index","toString","isSelected","selected"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport type { ISelectProps } from './types';\nimport { Platform, Keyboard } from 'react-native';\nimport { Actionsheet } from '../../composites/Actionsheet';\nimport Box from '../Box';\nimport { Input } from '../Input';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useControllableState } from '../../../hooks';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils';\nimport { useFormControl } from '../../composites/FormControl';\nimport { ChevronDownIcon } from '../Icon/Icons';\nimport type { IButtonProps } from '../Button/types';\nimport { ScrollView } from '../../basic/ScrollView';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { FlatList } from '../../basic/FlatList';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ISelectItemProps } from './types';\nimport { Pressable } from '../Pressable';\n\nexport const SelectContext = React.createContext({\n  onValueChange: (() => {}) as any,\n  selectedValue: null as any,\n  _selectedItem: {} as IButtonProps,\n  _item: {} as IButtonProps,\n});\n\nconst Select = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ISelectProps,\n  ref: any\n) => {\n  const selectProps = useFormControl({\n    isDisabled: props.isDisabled,\n    nativeID: props.nativeID,\n  });\n  const flatListData: ISelectItemProps[] = [];\n\n  const isDisabled = selectProps.disabled;\n  const tempFix = '__NativebasePlaceholder__';\n  const _ref = React.useRef(null);\n\n  const [isOpen, setIsOpen] = React.useState<boolean>(false);\n  const [isFocused, setIsFocused] = React.useState<boolean>(false);\n\n  const { focusProps, isFocusVisible } = useFocusRing();\n  const { hoverProps, isHovered } = useHover({ isDisabled }, _ref);\n\n  const {\n    onValueChange,\n    selectedValue,\n    children,\n    dropdownIcon,\n    dropdownCloseIcon,\n    dropdownOpenIcon,\n    placeholder,\n    accessibilityLabel,\n    defaultValue,\n    _item,\n    _selectedItem,\n    onOpen,\n    onClose,\n    optimized,\n    customDropdownIconProps,\n    _actionSheetContent,\n    _actionSheetBody,\n    _webSelect,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Select',\n    props,\n    {\n      isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    },\n    undefined\n  );\n\n  const [value, setValue] = useControllableState({\n    value: selectedValue,\n    defaultValue,\n    onChange: (newValue) => {\n      onValueChange && onValueChange(newValue);\n      setIsOpen(false);\n    },\n  });\n  const itemsList: Array<{ label: string; value: string }> = React.Children.map(\n    children ?? [],\n    (child: any) => {\n      return {\n        label: child.props.label,\n        value: child.props.value,\n      };\n    }\n  );\n  const selectedItemArray = itemsList.filter(\n    (item: any) => item.value === value\n  );\n  const selectedItem =\n    selectedItemArray && selectedItemArray.length ? selectedItemArray[0] : null;\n\n  const contextValue = React.useMemo(() => {\n    return {\n      onValueChange: setValue,\n      selectedValue: value,\n      _selectedItem: _selectedItem ?? {},\n      _item: _item ?? {},\n    };\n  }, [value, setValue, _selectedItem, _item]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const rightIcon =\n    isOpen && dropdownOpenIcon ? (\n      dropdownOpenIcon\n    ) : !isOpen && dropdownCloseIcon ? (\n      dropdownCloseIcon\n    ) : dropdownIcon ? (\n      dropdownIcon\n    ) : (\n      <ChevronDownIcon {...customDropdownIconProps} />\n    );\n\n  const handleClose = () => {\n    setIsOpen(false);\n    onClose && onClose();\n  };\n\n  if (optimized) {\n    React.Children.map(children, (child: any) => {\n      flatListData.push(child.props);\n    });\n  }\n\n  const [layoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    'shadow',\n    'opacity',\n  ]);\n\n  const commonInput = (\n    <Input\n      placeholder={placeholder}\n      InputRightElement={rightIcon}\n      {...resolvedProps}\n      // NOTE: Adding ts-ignore as we're not exposing isFocused in the Input component\n      // @ts-ignore-next-line\n      isFocused={isFocused}\n      isHovered={isHovered}\n      aria-hidden={true}\n      importantForAccessibility=\"no\"\n      value={selectedItem?.label}\n      editable={false}\n      focusable={false}\n      isDisabled={isDisabled}\n    />\n  );\n\n  return Platform.OS === 'web' ? (\n    <Box>\n      {/* <Box w=\"100%\" h=\"100%\" position=\"absolute\" opacity=\"0\" zIndex={1}> */}\n      <select\n        aria-readonly={selectProps.readOnly}\n        required={selectProps.required}\n        disabled={isDisabled}\n        {...focusProps}\n        {...hoverProps}\n        ref={mergeRefs([ref, _ref])}\n        //@ts-ignore\n        style={_webSelect}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        value={selectedItem === null ? tempFix : value}\n        aria-label={placeholder}\n        onFocus={() => {\n          setIsFocused(true);\n          onOpen && onOpen();\n        }}\n        onBlur={() => {\n          setIsFocused(false);\n          onClose && onClose();\n        }}\n      >\n        <option disabled value={tempFix}>\n          {placeholder}\n        </option>\n        {children}\n      </select>\n      {/* </Box> */}\n      {commonInput}\n    </Box>\n  ) : (\n    <>\n      <Pressable\n        onPress={() => {\n          Keyboard.dismiss();\n          setIsOpen(true);\n          onOpen && onOpen();\n        }}\n        disabled={isDisabled}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        ref={mergeRefs([ref, _ref])}\n        {...layoutProps}\n      >\n        {commonInput}\n      </Pressable>\n      <Actionsheet isOpen={isOpen} onClose={handleClose}>\n        <Actionsheet.Content {..._actionSheetContent}>\n          {/* TODO: Replace ScrollVeiw with FlatList */}\n          {optimized ? (\n            <FlatList\n              {..._actionSheetBody}\n              data={flatListData}\n              // eslint-disable-next-line no-shadow\n              keyExtractor={(_item, index) => index.toString()}\n              renderItem={({ item }: any) => {\n                const isSelected = selectedValue === item.value;\n                return (\n                  <Actionsheet.Item\n                    onPress={() => {\n                      if (!isDisabled) {\n                        setValue(item.value);\n                      }\n                    }}\n                    accessibilityState={{ selected: isSelected }}\n                    {...item}\n                    {..._item}\n                    {...(isSelected && _selectedItem)}\n                  >\n                    {item.label}\n                  </Actionsheet.Item>\n                );\n              }}\n            />\n          ) : (\n            <ScrollView {..._actionSheetBody}>\n              <SelectContext.Provider value={contextValue}>\n                {children}\n              </SelectContext.Provider>\n            </ScrollView>\n          )}\n        </Actionsheet.Content>\n      </Actionsheet>\n    </>\n  );\n};\n\nexport default memo(forwardRef(Select));\n"]},"metadata":{},"sourceType":"module"}