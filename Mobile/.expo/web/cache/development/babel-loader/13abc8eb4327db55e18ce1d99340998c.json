{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"onLongPress\", \"onLayout\", \"navigationState\", \"route\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport PlatformPressable from \"./PlatformPressable\";\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\nvar getActiveOpacity = function getActiveOpacity(position, routesLength, tabIndex) {\n  if (routesLength > 1) {\n    var inputRange = Array.from({\n      length: routesLength\n    }, function (_, i) {\n      return i;\n    });\n    return position.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (i) {\n        return i === tabIndex ? 1 : 0;\n      })\n    });\n  } else {\n    return 1;\n  }\n};\nvar getInactiveOpacity = function getInactiveOpacity(position, routesLength, tabIndex) {\n  if (routesLength > 1) {\n    var inputRange = Array.from({\n      length: routesLength\n    }, function (_, i) {\n      return i;\n    });\n    return position.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (i) {\n        return i === tabIndex ? 0 : 1;\n      })\n    });\n  } else {\n    return 0;\n  }\n};\nvar TabBarItemInternal = function TabBarItemInternal(_ref) {\n  var getAccessibilityLabel = _ref.getAccessibilityLabel,\n    getAccessible = _ref.getAccessible,\n    getLabelText = _ref.getLabelText,\n    getTestID = _ref.getTestID,\n    onLongPress = _ref.onLongPress,\n    onPress = _ref.onPress,\n    isFocused = _ref.isFocused,\n    position = _ref.position,\n    route = _ref.route,\n    style = _ref.style,\n    inactiveColorCustom = _ref.inactiveColor,\n    activeColorCustom = _ref.activeColor,\n    labelStyle = _ref.labelStyle,\n    onLayout = _ref.onLayout,\n    tabIndex = _ref.index,\n    pressColor = _ref.pressColor,\n    pressOpacity = _ref.pressOpacity,\n    renderBadge = _ref.renderBadge,\n    renderIcon = _ref.renderIcon,\n    defaultTabWidth = _ref.defaultTabWidth,\n    routesLength = _ref.routesLength,\n    renderLabelCustom = _ref.renderLabel;\n  var labelColorFromStyle = StyleSheet.flatten(labelStyle || {}).color;\n  var activeColor = activeColorCustom !== undefined ? activeColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_ACTIVE_COLOR;\n  var inactiveColor = inactiveColorCustom !== undefined ? inactiveColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_INACTIVE_COLOR;\n  var activeOpacity = getActiveOpacity(position, routesLength, tabIndex);\n  var inactiveOpacity = getInactiveOpacity(position, routesLength, tabIndex);\n  var icon = null;\n  var label = null;\n  if (renderIcon) {\n    var activeIcon = renderIcon({\n      route: route,\n      focused: true,\n      color: activeColor\n    });\n    var inactiveIcon = renderIcon({\n      route: route,\n      focused: false,\n      color: inactiveColor\n    });\n    if (inactiveIcon != null && activeIcon != null) {\n      icon = React.createElement(View, {\n        style: styles.icon\n      }, React.createElement(Animated.View, {\n        style: {\n          opacity: inactiveOpacity\n        }\n      }, inactiveIcon), React.createElement(Animated.View, {\n        style: [StyleSheet.absoluteFill, {\n          opacity: activeOpacity\n        }]\n      }, activeIcon));\n    }\n  }\n  var renderLabel = renderLabelCustom !== undefined ? renderLabelCustom : function (labelProps) {\n    var labelText = getLabelText({\n      route: labelProps.route\n    });\n    if (typeof labelText === 'string') {\n      return React.createElement(Animated.Text, {\n        style: [styles.label, icon ? {\n          marginTop: 0\n        } : null, labelStyle, {\n          color: labelProps.color\n        }]\n      }, labelText);\n    }\n    return labelText;\n  };\n  if (renderLabel) {\n    var activeLabel = renderLabel({\n      route: route,\n      focused: true,\n      color: activeColor\n    });\n    var inactiveLabel = renderLabel({\n      route: route,\n      focused: false,\n      color: inactiveColor\n    });\n    label = React.createElement(View, null, React.createElement(Animated.View, {\n      style: {\n        opacity: inactiveOpacity\n      }\n    }, inactiveLabel), React.createElement(Animated.View, {\n      style: [StyleSheet.absoluteFill, {\n        opacity: activeOpacity\n      }]\n    }, activeLabel));\n  }\n  var tabStyle = StyleSheet.flatten(style);\n  var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n  var tabContainerStyle = isWidthSet ? null : {\n    width: defaultTabWidth\n  };\n  var scene = {\n    route: route\n  };\n  var accessibilityLabel = getAccessibilityLabel(scene);\n  accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n  var badge = renderBadge ? renderBadge(scene) : null;\n  return React.createElement(PlatformPressable, {\n    android_ripple: {\n      borderless: true\n    },\n    testID: getTestID(scene),\n    accessible: getAccessible(scene),\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"tab\",\n    accessibilityState: {\n      selected: isFocused\n    },\n\n    accessibilityStates: isFocused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    delayPressIn: 0,\n    onLayout: onLayout,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    style: [styles.pressable, tabContainerStyle]\n  }, React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.item, tabStyle]\n  }, icon, label, badge != null ? React.createElement(View, {\n    style: styles.badge\n  }, badge) : null));\n};\nvar MemoizedTabBarItemInternal = React.memo(TabBarItemInternal);\nfunction TabBarItem(props) {\n  var onPress = props.onPress,\n    onLongPress = props.onLongPress,\n    onLayout = props.onLayout,\n    navigationState = props.navigationState,\n    route = props.route,\n    rest = _objectWithoutProperties(props, _excluded);\n  var onPressLatest = useLatestCallback(onPress);\n  var onLongPressLatest = useLatestCallback(onLongPress);\n  var onLayoutLatest = useLatestCallback(onLayout ? onLayout : function () {});\n  var tabIndex = navigationState.routes.indexOf(route);\n  return React.createElement(MemoizedTabBarItemInternal, _extends({}, rest, {\n    onPress: onPressLatest,\n    onLayout: onLayoutLatest,\n    onLongPress: onLongPressLatest,\n    isFocused: navigationState.index === tabIndex,\n    route: route,\n    index: tabIndex,\n    routesLength: navigationState.routes.length\n  }));\n}\nexport default TabBarItem;\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n    textTransform: 'uppercase'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  },\n  pressable: {\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["TabBarItem.tsx"],"names":["React","useLatestCallback","PlatformPressable","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","getActiveOpacity","position","routesLength","tabIndex","inputRange","from","length","_","i","interpolate","outputRange","map","getInactiveOpacity","TabBarItemInternal","getAccessibilityLabel","getAccessible","getLabelText","getTestID","onLongPress","onPress","isFocused","route","style","inactiveColor","inactiveColorCustom","activeColor","activeColorCustom","labelStyle","onLayout","index","pressColor","pressOpacity","renderBadge","renderIcon","defaultTabWidth","renderLabel","renderLabelCustom","labelColorFromStyle","StyleSheet","flatten","color","undefined","activeOpacity","inactiveOpacity","icon","label","activeIcon","focused","inactiveIcon","styles","opacity","absoluteFill","labelProps","labelText","marginTop","activeLabel","inactiveLabel","tabStyle","isWidthSet","width","tabContainerStyle","scene","accessibilityLabel","badge","borderless","selected","pressable","item","MemoizedTabBarItemInternal","memo","TabBarItem","props","navigationState","rest","onPressLatest","onLongPressLatest","onLayoutLatest","routes","indexOf","create","margin","backgroundColor","textTransform","flex","alignItems","justifyContent","padding","minHeight","top","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\nimport PlatformPressable from './PlatformPressable';\nimport type { Scene, Route, NavigationState } from './types';\n\nexport type Props<T extends Route> = {\n  position: Animated.AnimatedInterpolation;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  defaultTabWidth?: number;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nconst getActiveOpacity = (\n  position: Animated.AnimatedInterpolation,\n  routesLength: number,\n  tabIndex: number\n) => {\n  if (routesLength > 1) {\n    const inputRange = Array.from({ length: routesLength }, (_, i) => i);\n\n    return position.interpolate({\n      inputRange,\n      outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n    });\n  } else {\n    return 1;\n  }\n};\n\nconst getInactiveOpacity = (\n  position: Animated.AnimatedInterpolation,\n  routesLength: number,\n  tabIndex: number\n) => {\n  if (routesLength > 1) {\n    const inputRange = Array.from({ length: routesLength }, (_, i) => i);\n\n    return position.interpolate({\n      inputRange,\n      outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n    });\n  } else {\n    return 0;\n  }\n};\n\ntype TabBarItemInternalProps<T extends Route> = Omit<\n  Props<T>,\n  'navigationState'\n> & {\n  isFocused: boolean;\n  index: number;\n  routesLength: number;\n};\n\nconst TabBarItemInternal = <T extends Route>({\n  getAccessibilityLabel,\n  getAccessible,\n  getLabelText,\n  getTestID,\n  onLongPress,\n  onPress,\n  isFocused,\n  position,\n  route,\n  style,\n  inactiveColor: inactiveColorCustom,\n  activeColor: activeColorCustom,\n  labelStyle,\n  onLayout,\n  index: tabIndex,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  defaultTabWidth,\n  routesLength,\n  renderLabel: renderLabelCustom,\n}: TabBarItemInternalProps<T>) => {\n  const labelColorFromStyle = StyleSheet.flatten(labelStyle || {}).color;\n\n  const activeColor =\n    activeColorCustom !== undefined\n      ? activeColorCustom\n      : typeof labelColorFromStyle === 'string'\n      ? labelColorFromStyle\n      : DEFAULT_ACTIVE_COLOR;\n  const inactiveColor =\n    inactiveColorCustom !== undefined\n      ? inactiveColorCustom\n      : typeof labelColorFromStyle === 'string'\n      ? labelColorFromStyle\n      : DEFAULT_INACTIVE_COLOR;\n\n  const activeOpacity = getActiveOpacity(position, routesLength, tabIndex);\n  const inactiveOpacity = getInactiveOpacity(position, routesLength, tabIndex);\n\n  let icon: React.ReactNode | null = null;\n  let label: React.ReactNode | null = null;\n\n  if (renderIcon) {\n    const activeIcon = renderIcon({\n      route,\n      focused: true,\n      color: activeColor,\n    });\n    const inactiveIcon = renderIcon({\n      route,\n      focused: false,\n      color: inactiveColor,\n    });\n\n    if (inactiveIcon != null && activeIcon != null) {\n      icon = (\n        <View style={styles.icon}>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveIcon}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeIcon}\n          </Animated.View>\n        </View>\n      );\n    }\n  }\n\n  const renderLabel =\n    renderLabelCustom !== undefined\n      ? renderLabelCustom\n      : (labelProps: { route: T; color: string }) => {\n          const labelText = getLabelText({ route: labelProps.route });\n\n          if (typeof labelText === 'string') {\n            return (\n              <Animated.Text\n                style={[\n                  styles.label,\n                  icon ? { marginTop: 0 } : null,\n                  labelStyle,\n                  { color: labelProps.color },\n                ]}\n              >\n                {labelText}\n              </Animated.Text>\n            );\n          }\n\n          return labelText;\n        };\n\n  if (renderLabel) {\n    const activeLabel = renderLabel({\n      route,\n      focused: true,\n      color: activeColor,\n    });\n    const inactiveLabel = renderLabel({\n      route,\n      focused: false,\n      color: inactiveColor,\n    });\n\n    label = (\n      <View>\n        <Animated.View style={{ opacity: inactiveOpacity }}>\n          {inactiveLabel}\n        </Animated.View>\n        <Animated.View\n          style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n        >\n          {activeLabel}\n        </Animated.View>\n      </View>\n    );\n  }\n\n  const tabStyle = StyleSheet.flatten(style);\n  const isWidthSet = tabStyle?.width !== undefined;\n\n  const tabContainerStyle: ViewStyle | null = isWidthSet\n    ? null\n    : { width: defaultTabWidth };\n\n  const scene = { route };\n\n  let accessibilityLabel = getAccessibilityLabel(scene);\n\n  accessibilityLabel =\n    typeof accessibilityLabel !== 'undefined'\n      ? accessibilityLabel\n      : getLabelText(scene);\n\n  const badge = renderBadge ? renderBadge(scene) : null;\n\n  return (\n    <PlatformPressable\n      android_ripple={{ borderless: true }}\n      testID={getTestID(scene)}\n      accessible={getAccessible(scene)}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"tab\"\n      accessibilityState={{ selected: isFocused }}\n      // @ts-ignore: this is to support older React Native versions\n      accessibilityStates={isFocused ? ['selected'] : []}\n      pressColor={pressColor}\n      pressOpacity={pressOpacity}\n      delayPressIn={0}\n      onLayout={onLayout}\n      onPress={onPress}\n      onLongPress={onLongPress}\n      style={[styles.pressable, tabContainerStyle]}\n    >\n      <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n        {icon}\n        {label}\n        {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n      </View>\n    </PlatformPressable>\n  );\n};\n\nconst MemoizedTabBarItemInternal = React.memo(\n  TabBarItemInternal\n) as typeof TabBarItemInternal;\n\nfunction TabBarItem<T extends Route>(props: Props<T>) {\n  const { onPress, onLongPress, onLayout, navigationState, route, ...rest } =\n    props;\n  const onPressLatest = useLatestCallback(onPress);\n  const onLongPressLatest = useLatestCallback(onLongPress);\n  const onLayoutLatest = useLatestCallback(onLayout ? onLayout : () => {});\n\n  const tabIndex = navigationState.routes.indexOf(route);\n\n  return (\n    <MemoizedTabBarItemInternal\n      {...rest}\n      onPress={onPressLatest}\n      onLayout={onLayoutLatest}\n      onLongPress={onLongPressLatest}\n      isFocused={navigationState.index === tabIndex}\n      route={route}\n      index={tabIndex}\n      routesLength={navigationState.routes.length}\n    />\n  );\n}\n\nexport default TabBarItem;\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n    textTransform: 'uppercase',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  pressable: {\n    // The label is not pressable on Windows\n    // Adding backgroundColor: 'transparent' seems to fix it\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}