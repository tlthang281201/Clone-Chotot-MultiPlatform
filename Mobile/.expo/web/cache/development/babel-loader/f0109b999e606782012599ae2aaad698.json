{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nexport function throwIfInvalidProps(props) {\n  checks.forEach(function (check) {\n    return check.validate(props);\n  });\n}\nvar PropCheck = _createClass(function PropCheck(isInvalid, errorText) {\n  var _this = this;\n  _classCallCheck(this, PropCheck);\n  this.validate = function (props) {\n    if (_this.isInvalid(props)) {\n      throw new Error(_this.errorText + \" Check usage of react-native-date-picker.\");\n    }\n  };\n  this.isInvalid = isInvalid;\n  this.errorText = errorText;\n});\nvar dateCheck = new PropCheck(function (props) {\n  return props && !(props.date instanceof Date);\n}, 'Invalid or missing Date prop. Must be a Date object.');\nvar widthCheck = new PropCheck(function (props) {\n  return props && props.style && props.style.width && typeof props.style.width !== 'number';\n}, 'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.');\nvar heightCheck = new PropCheck(function (props) {\n  return props && props.style && props.style.height && typeof props.style.height !== 'number';\n}, 'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.');\nvar modeCheck = new PropCheck(function (props) {\n  return props && props.mode && !['datetime', 'date', 'time'].includes(props.mode);\n}, \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\");\nvar androidVariantCheck = new PropCheck(function (props) {\n  return props && props.androidVariant && !['nativeAndroid', 'iosClone'].includes(props.androidVariant);\n}, \"Invalid android variant. Valid modes: 'nativeAndroid', 'iosClone'\");\nvar themeCheck = new PropCheck(function (props) {\n  return props && props.theme && !['light', 'dark', 'auto'].includes(props.theme);\n}, \"Invalid theme. Valid options: 'light', 'dark', 'auto'\");\nvar checks = [dateCheck, widthCheck, heightCheck, modeCheck, androidVariantCheck, themeCheck];","map":{"version":3,"names":["throwIfInvalidProps","props","checks","forEach","check","validate","PropCheck","isInvalid","errorText","Error","dateCheck","date","Date","widthCheck","style","width","heightCheck","height","modeCheck","mode","includes","androidVariantCheck","androidVariant","themeCheck","theme"],"sources":["F:/DoAn/DACN1/ShopApp/node_modules/react-native-date-picker/src/propChecker.js"],"sourcesContent":["export function throwIfInvalidProps(props) {\n  checks.forEach((check) => check.validate(props))\n}\n\nclass PropCheck {\n  constructor(isInvalid, errorText) {\n    this.isInvalid = isInvalid\n    this.errorText = errorText\n  }\n  validate = (props) => {\n    if (this.isInvalid(props)) {\n      throw new Error(\n        `${this.errorText} Check usage of react-native-date-picker.`\n      )\n    }\n  }\n}\n\nconst dateCheck = new PropCheck(\n  (props) => props && !(props.date instanceof Date),\n  'Invalid or missing Date prop. Must be a Date object.'\n)\n\nconst widthCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.style &&\n    props.style.width &&\n    typeof props.style.width !== 'number',\n  'Invalid style: width. Width needs to be a number. Percentages or other values are not supported.'\n)\n\nconst heightCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.style &&\n    props.style.height &&\n    typeof props.style.height !== 'number',\n  'Invalid style: height. Height needs to be a number. Percentages or other values are not supported.'\n)\n\nconst modeCheck = new PropCheck(\n  (props) =>\n    props && props.mode && !['datetime', 'date', 'time'].includes(props.mode),\n  \"Invalid mode. Valid modes: 'datetime', 'date', 'time'\"\n)\n\nconst androidVariantCheck = new PropCheck(\n  (props) =>\n    props &&\n    props.androidVariant &&\n    !['nativeAndroid', 'iosClone'].includes(props.androidVariant),\n  \"Invalid android variant. Valid modes: 'nativeAndroid', 'iosClone'\"\n)\n\nconst themeCheck = new PropCheck(\n  (props) =>\n    props && props.theme && !['light', 'dark', 'auto'].includes(props.theme),\n  \"Invalid theme. Valid options: 'light', 'dark', 'auto'\"\n)\n\nconst checks = [\n  dateCheck,\n  widthCheck,\n  heightCheck,\n  modeCheck,\n  androidVariantCheck,\n  themeCheck,\n]\n"],"mappings":";;AAAA,OAAO,SAASA,mBAAmB,CAACC,KAAK,EAAE;EACzCC,MAAM,CAACC,OAAO,CAAC,UAACC,KAAK;IAAA,OAAKA,KAAK,CAACC,QAAQ,CAACJ,KAAK,CAAC;EAAA,EAAC;AAClD;AAAC,IAEKK,SAAS,gBACb,mBAAYC,SAAS,EAAEC,SAAS,EAAE;EAAA;EAAA;EAAA,KAIlCH,QAAQ,GAAG,UAACJ,KAAK,EAAK;IACpB,IAAI,KAAI,CAACM,SAAS,CAACN,KAAK,CAAC,EAAE;MACzB,MAAM,IAAIQ,KAAK,CACV,KAAI,CAACD,SAAS,+CAClB;IACH;EACF,CAAC;EATC,IAAI,CAACD,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;AAC5B,CAAC;AAUH,IAAME,SAAS,GAAG,IAAIJ,SAAS,CAC7B,UAACL,KAAK;EAAA,OAAKA,KAAK,IAAI,EAAEA,KAAK,CAACU,IAAI,YAAYC,IAAI,CAAC;AAAA,GACjD,sDAAsD,CACvD;AAED,IAAMC,UAAU,GAAG,IAAIP,SAAS,CAC9B,UAACL,KAAK;EAAA,OACJA,KAAK,IACLA,KAAK,CAACa,KAAK,IACXb,KAAK,CAACa,KAAK,CAACC,KAAK,IACjB,OAAOd,KAAK,CAACa,KAAK,CAACC,KAAK,KAAK,QAAQ;AAAA,GACvC,kGAAkG,CACnG;AAED,IAAMC,WAAW,GAAG,IAAIV,SAAS,CAC/B,UAACL,KAAK;EAAA,OACJA,KAAK,IACLA,KAAK,CAACa,KAAK,IACXb,KAAK,CAACa,KAAK,CAACG,MAAM,IAClB,OAAOhB,KAAK,CAACa,KAAK,CAACG,MAAM,KAAK,QAAQ;AAAA,GACxC,oGAAoG,CACrG;AAED,IAAMC,SAAS,GAAG,IAAIZ,SAAS,CAC7B,UAACL,KAAK;EAAA,OACJA,KAAK,IAAIA,KAAK,CAACkB,IAAI,IAAI,CAAC,CAAC,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACnB,KAAK,CAACkB,IAAI,CAAC;AAAA,GAC3E,uDAAuD,CACxD;AAED,IAAME,mBAAmB,GAAG,IAAIf,SAAS,CACvC,UAACL,KAAK;EAAA,OACJA,KAAK,IACLA,KAAK,CAACqB,cAAc,IACpB,CAAC,CAAC,eAAe,EAAE,UAAU,CAAC,CAACF,QAAQ,CAACnB,KAAK,CAACqB,cAAc,CAAC;AAAA,GAC/D,mEAAmE,CACpE;AAED,IAAMC,UAAU,GAAG,IAAIjB,SAAS,CAC9B,UAACL,KAAK;EAAA,OACJA,KAAK,IAAIA,KAAK,CAACuB,KAAK,IAAI,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAACJ,QAAQ,CAACnB,KAAK,CAACuB,KAAK,CAAC;AAAA,GAC1E,uDAAuD,CACxD;AAED,IAAMtB,MAAM,GAAG,CACbQ,SAAS,EACTG,UAAU,EACVG,WAAW,EACXE,SAAS,EACTG,mBAAmB,EACnBE,UAAU,CACX"},"metadata":{},"sourceType":"module"}