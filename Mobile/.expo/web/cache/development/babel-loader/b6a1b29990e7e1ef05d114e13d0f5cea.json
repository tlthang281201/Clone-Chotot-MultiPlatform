{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"onKeyPress\"],\n  _excluded2 = [\"ariaLabel\", \"accessibilityLabel\", \"type\", \"isFullWidth\", \"isDisabled\", \"isReadOnly\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"placeholderTextColor\", \"selectionColor\", \"underlineColorAndroid\", \"InputLeftElement\", \"InputRightElement\", \"leftElement\", \"rightElement\", \"onFocus\", \"onBlur\", \"wrapperRef\", \"_stack\", \"_input\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { memo, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useToken } from \"../../../hooks\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs } from \"../../../utils\";\nimport { Stack } from \"../Stack\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nvar StyledInput = makeStyledComponent(TextInput);\nvar Input = function Input(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n    isFocusedProp = _ref2.isFocused,\n    _onKeyPress = _ref2.onKeyPress,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isFocused = _React$useState2[0],\n    setIsFocused = _React$useState2[1];\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor);\n\n  props.inValidOutlineColor = useToken('colors', props.inValidOutlineColor);\n  var _ref = React.useRef(null);\n  var _useHover = useHover({}, _ref),\n    isHovered = _useHover.isHovered;\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n  var _usePropsResolution = usePropsResolution('Input', _objectSpread(_objectSpread({}, inputThemeProps), props), {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly\n    }),\n    ariaLabel = _usePropsResolution.ariaLabel,\n    accessibilityLabel = _usePropsResolution.accessibilityLabel,\n    type = _usePropsResolution.type,\n    isFullWidth = _usePropsResolution.isFullWidth,\n    isDisabled = _usePropsResolution.isDisabled,\n    isReadOnly = _usePropsResolution.isReadOnly,\n    fontFamily = _usePropsResolution.fontFamily,\n    fontWeight = _usePropsResolution.fontWeight,\n    fontStyle = _usePropsResolution.fontStyle,\n    placeholderTextColor = _usePropsResolution.placeholderTextColor,\n    selectionColor = _usePropsResolution.selectionColor,\n    underlineColorAndroid = _usePropsResolution.underlineColorAndroid,\n    InputLeftElement = _usePropsResolution.InputLeftElement,\n    InputRightElement = _usePropsResolution.InputRightElement,\n    leftElement = _usePropsResolution.leftElement,\n    rightElement = _usePropsResolution.rightElement,\n    _onFocus = _usePropsResolution.onFocus,\n    _onBlur = _usePropsResolution.onBlur,\n    wrapperRef = _usePropsResolution.wrapperRef,\n    _stack = _usePropsResolution._stack,\n    _input = _usePropsResolution._input,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.border), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), _toConsumableArray(stylingProps.background), ['shadow', 'opacity'])),\n    _extractInObject2 = _slicedToArray(_extractInObject, 2),\n    layoutProps = _extractInObject2[0],\n    nonLayoutProps = _extractInObject2[1];\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  var resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  var resolvedSelectionColor = useToken('colors', selectionColor);\n  var resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Stack, _extends({}, _stack, layoutProps, {\n    ref: mergeRefs([_ref, wrapperRef]),\n    isFocused: isFocused\n  }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, React.createElement(StyledInput, _extends({}, inputProps, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, nonLayoutProps, resolvedFontFamily, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: function onKeyPress(e) {\n      e.persist();\n      _onKeyPress && _onKeyPress(e);\n    },\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    }\n  }, _input, {\n    ref: mergeRefs([ref, _ref, wrapperRef])\n  })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n};\nexport default memo(forwardRef(Input));","map":{"version":3,"sources":["Input.tsx"],"names":["React","memo","forwardRef","useToken","useFormControl","useHasResponsiveProps","useHover","extractInObject","stylingProps","usePropsResolution","mergeRefs","Stack","makeStyledComponent","useResolvedFontFamily","StyledInput","TextInput","Input","isHovered","isHoveredProp","isFocused","isFocusedProp","onKeyPress","props","ref","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","setIsFocused","useState","handleFocus","focusState","callback","focusOutlineColor","inValidOutlineColor","_ref","useRef","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","wrapperRef","_stack","_input","resolvedProps","layoutProps","nonLayoutProps","margin","border","layout","flexbox","position","background","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","undefined","e","persist"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor);\n  //@ts-ignore\n  props.inValidOutlineColor = useToken('colors', props.inValidOutlineColor);\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}