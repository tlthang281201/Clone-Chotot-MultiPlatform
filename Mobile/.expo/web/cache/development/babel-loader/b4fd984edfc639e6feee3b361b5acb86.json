{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useControlledState as $fQ2SF$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $fQ2SF$useMemo, useState as $fQ2SF$useState } from \"react\";\nvar $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);\nvar $a54cdc5c1942b639$var$i = 0;\nfunction $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {\n  var name = $fQ2SF$useMemo(function () {\n    return props.name || \"radio-group-\" + $a54cdc5c1942b639$var$instance + \"-\" + ++$a54cdc5c1942b639$var$i;\n  }, [props.name]);\n  var _$fQ2SF$useControlled = $fQ2SF$useControlledState(props.value, props.defaultValue, props.onChange),\n    _$fQ2SF$useControlled2 = _slicedToArray(_$fQ2SF$useControlled, 2),\n    selectedValue = _$fQ2SF$useControlled2[0],\n    setSelected = _$fQ2SF$useControlled2[1];\n  var _$fQ2SF$useState = $fQ2SF$useState(null),\n    _$fQ2SF$useState2 = _slicedToArray(_$fQ2SF$useState, 2),\n    lastFocusedValue = _$fQ2SF$useState2[0],\n    setLastFocusedValue = _$fQ2SF$useState2[1];\n  var setSelectedValue = function setSelectedValue(value) {\n    if (!props.isReadOnly && !props.isDisabled) setSelected(value);\n  };\n  return {\n    name: name,\n    selectedValue: selectedValue,\n    setSelectedValue: setSelectedValue,\n    lastFocusedValue: lastFocusedValue,\n    setLastFocusedValue: setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    validationState: props.validationState\n  };\n}\nexport { $a54cdc5c1942b639$export$bca9d026f8e704eb as useRadioGroupState };","map":{"version":3,"sources":["packages/@react-stately/radio/src/useRadioGroupState.ts"],"names":[],"mappings":";;;AA+CA,IAAI,8BAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAA,GAAK,WAAW,CAAA;AACrD,IAAI,uBAAC,GAAG,CAAC;SAMO,yCAAkB,CAAC,KAAsB,EAAoB;EAE3E,IAAI,IAAI,GAAG,cAAO,CAAA;IAAA,OAAO,KAAK,CAAC,IAAI,qBAAmB,8BAAQ,SAAE,EAAI,uBAAC;EAAA,GAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;EACrF,4BAAmC,yBAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAA;IAAA;IAAhG,aAAa;IAAE,WAAW;EAC/B,uBAA8C,eAAQ,CAAC,IAAI,CAAA;IAAA;IAAtD,gBAAgB;IAAE,mBAAmB;EAE1C,IAAI,gBAAgB,GAAA,SAAhB,gBAAgB,CAAI,KAAK,EAAK;IAChC,IAAE,CAAG,KAAK,CAAC,UAAU,IAAA,CAAK,KAAK,CAAC,UAAU,EACxC,WAAW,CAAC,KAAK,CAAA;EAErB,CAAC;EAED,OAAO;UACL,IAAI;mBACJ,aAAa;sBACb,gBAAgB;sBAChB,gBAAgB;yBAChB,mBAAmB;IACnB,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK;IACrC,UAAU,EAAE,KAAK,CAAC,UAAU,IAAI,KAAK;IACrC,eAAe,EAAE,KAAK,CAAC;EACzB,CAAC;AACH","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RadioGroupProps} from '@react-types/radio';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface RadioGroupState {\n  /**\n   * The name for the group, used for native form submission.\n   * @deprecated\n   * @private\n   */\n  readonly name: string,\n\n  /** Whether the radio group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the radio group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** The currently selected value. */\n  readonly selectedValue: string | null,\n\n  /** Sets the selected value. */\n  setSelectedValue(value: string): void,\n\n  /** The value of the last focused radio. */\n  readonly lastFocusedValue: string | null,\n\n  /** Sets the last focused value. */\n  setLastFocusedValue(value: string): void,\n\n  /** The current validation state of the radio group. */\n  validationState: ValidationState\n}\n\nlet instance = Math.round(Math.random() * 10000000000);\nlet i = 0;\n\n/**\n * Provides state management for a radio group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useRadioGroupState(props: RadioGroupProps): RadioGroupState  {\n  // Preserved here for backward compatibility. React Aria now generates the name instead of stately.\n  let name = useMemo(() => props.name || `radio-group-${instance}-${++i}`, [props.name]);\n  let [selectedValue, setSelected] = useControlledState(props.value, props.defaultValue, props.onChange);\n  let [lastFocusedValue, setLastFocusedValue] = useState(null);\n\n  let setSelectedValue = (value) => {\n    if (!props.isReadOnly && !props.isDisabled) {\n      setSelected(value);\n    }\n  };\n\n  return {\n    name,\n    selectedValue,\n    setSelectedValue,\n    lastFocusedValue,\n    setLastFocusedValue,\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    validationState: props.validationState\n  };\n}\n"]},"metadata":{},"sourceType":"module"}