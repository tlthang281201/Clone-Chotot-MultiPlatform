{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport { Box, HStack, Pressable, Text, View } from \"native-base\";\nimport DocumentPicker, { isCancel, isInProgress, types } from \"react-native-document-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _useState = useState(false),\n  _useState2 = _slicedToArray(_useState, 2),\n  uploading = _useState2[0],\n  setUploading = _useState2[1];\nvar _ref = useState < string | null > null,\n  _ref2 = _slicedToArray(_ref, 2),\n  avatarUrl = _ref2[0],\n  setAvatarUrl = _ref2[1];\nvar avatarSize = {\n  height: size,\n  width: size\n};\nfunction test() {\n  function uploadAvatar() {\n    return _uploadAvatar.apply(this, arguments);\n  }\n  function _uploadAvatar() {\n    _uploadAvatar = _asyncToGenerator(function* () {\n      try {\n        setUploading(true);\n        var file = yield DocumentPicker.pickSingle({\n          presentationStyle: \"fullScreen\",\n          copyTo: \"cachesDirectory\",\n          type: types.images,\n          mode: \"open\"\n        });\n        var photo = {\n          uri: file.fileCopyUri,\n          type: file.type,\n          name: file.name\n        };\n        var formData = new FormData();\n        formData.append(\"file\", photo);\n        var fileExt = file.name.split(\".\").pop();\n        var filePath = Math.random() + \".\" + fileExt;\n        var _yield$supabase$stora = yield supabase.storage.from(\"avatars\").upload(filePath, formData),\n          error = _yield$supabase$stora.error;\n        if (error) {\n          throw error;\n        }\n        onUpload(filePath);\n      } catch (error) {\n        if (isCancel(error)) {\n          console.warn(\"cancelled\");\n        } else if (isInProgress(error)) {\n          console.warn(\"multiple pickers were opened, only the last will be considered\");\n        } else if (error instanceof Error) {\n          Alert.alert(error.message);\n        } else {\n          throw error;\n        }\n      } finally {\n        setUploading(false);\n      }\n    });\n    return _uploadAvatar.apply(this, arguments);\n  }\n  return _jsxs(View, {\n    children: [avatarUrl ? _jsx(Image, {\n      source: {\n        uri: avatarUrl\n      },\n      accessibilityLabel: \"Avatar\",\n      style: [avatarSize, styles.avatar, styles.image]\n    }) : _jsx(View, {\n      style: [avatarSize, styles.avatar, styles.noImage]\n    }), _jsx(View, {\n      children: _jsx(Button, {\n        title: uploading ? \"Uploading ...\" : \"Upload\",\n        onPress: uploadAvatar,\n        disabled: uploading\n      })\n    })]\n  });\n}\nexport default test;","map":{"version":3,"names":["React","useState","Box","HStack","Pressable","Text","View","DocumentPicker","isCancel","isInProgress","types","uploading","setUploading","string","avatarUrl","setAvatarUrl","avatarSize","height","size","width","test","uploadAvatar","file","pickSingle","presentationStyle","copyTo","type","images","mode","photo","uri","fileCopyUri","name","formData","FormData","append","fileExt","split","pop","filePath","Math","random","supabase","storage","from","upload","error","onUpload","console","warn","Error","Alert","alert","message","styles","avatar","image","noImage"],"sources":["F:/DoAn/DACN1/ShopApp/src/Screens/test.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Box, HStack, Pressable, Text, View } from \"native-base\";\r\nimport DocumentPicker, {\r\n  isCancel,\r\n  isInProgress,\r\n  types,\r\n} from \"react-native-document-picker\";\r\n\r\nconst [uploading, setUploading] = useState(false);\r\nconst [avatarUrl, setAvatarUrl] = (useState < string) | (null > null);\r\nconst avatarSize = { height: size, width: size };\r\nfunction test() {\r\n  async function uploadAvatar() {\r\n    try {\r\n      setUploading(true);\r\n\r\n      const file = await DocumentPicker.pickSingle({\r\n        presentationStyle: \"fullScreen\",\r\n        copyTo: \"cachesDirectory\",\r\n        type: types.images,\r\n        mode: \"open\",\r\n      });\r\n\r\n      const photo = {\r\n        uri: file.fileCopyUri,\r\n        type: file.type,\r\n        name: file.name,\r\n      };\r\n\r\n      const formData = new FormData();\r\n      formData.append(\"file\", photo);\r\n\r\n      const fileExt = file.name.split(\".\").pop();\r\n      const filePath = `${Math.random()}.${fileExt}`;\r\n\r\n      let { error } = await supabase.storage\r\n        .from(\"avatars\")\r\n        .upload(filePath, formData);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      onUpload(filePath);\r\n    } catch (error) {\r\n      if (isCancel(error)) {\r\n        console.warn(\"cancelled\");\r\n        // User cancelled the picker, exit any dialogs or menus and move on\r\n      } else if (isInProgress(error)) {\r\n        console.warn(\r\n          \"multiple pickers were opened, only the last will be considered\"\r\n        );\r\n      } else if (error instanceof Error) {\r\n        Alert.alert(error.message);\r\n      } else {\r\n        throw error;\r\n      }\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  }\r\n  return (\r\n    <View>\r\n      {avatarUrl ? (\r\n        <Image\r\n          source={{ uri: avatarUrl }}\r\n          accessibilityLabel=\"Avatar\"\r\n          style={[avatarSize, styles.avatar, styles.image]}\r\n        />\r\n      ) : (\r\n        <View style={[avatarSize, styles.avatar, styles.noImage]} />\r\n      )}\r\n      <View>\r\n        <Button\r\n          title={uploading ? \"Uploading ...\" : \"Upload\"}\r\n          onPress={uploadAvatar}\r\n          disabled={uploading}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default test;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}