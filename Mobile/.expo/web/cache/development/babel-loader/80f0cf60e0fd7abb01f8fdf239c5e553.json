{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport invariant from 'invariant';\nimport { perPlatformTypes } from \"./fileTypes\";\nexport var types = perPlatformTypes[Platform.OS];\nvar RNDocumentPicker = NativeModules.RNDocumentPicker;\nexport function pickDirectory(_x) {\n  return _pickDirectory.apply(this, arguments);\n}\nfunction _pickDirectory() {\n  _pickDirectory = _asyncToGenerator(function* (params) {\n    if (Platform.OS === 'ios') {\n      var result = yield pick(_objectSpread(_objectSpread({}, params), {}, {\n        mode: 'open',\n        allowMultiSelection: false,\n        type: ['public.folder']\n      }));\n      return {\n        uri: result[0].uri\n      };\n    } else {\n      return RNDocumentPicker.pickDirectory();\n    }\n  });\n  return _pickDirectory.apply(this, arguments);\n}\nexport function pickMultiple(opts) {\n  var options = _objectSpread(_objectSpread({}, opts), {}, {\n    allowMultiSelection: true\n  });\n  return pick(options);\n}\nexport function pickSingle(opts) {\n  var options = _objectSpread(_objectSpread({}, opts), {}, {\n    allowMultiSelection: false\n  });\n  return pick(options).then(function (results) {\n    return results[0];\n  });\n}\nexport function pick(opts) {\n  var options = _objectSpread({\n    allowMultiSelection: false,\n    type: [types.allFiles]\n  }, opts);\n  var newOpts = _objectSpread(_objectSpread({\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical'\n  }, options), {}, {\n    type: Array.isArray(options.type) ? options.type : [options.type]\n  });\n  return doPick(newOpts);\n}\nfunction doPick(options) {\n  var _options$mode, _options$copyTo;\n  invariant(!('filetype' in options), 'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(!('types' in options), 'A `types` option was passed to DocumentPicker.pick, the correct option is `type`');\n  invariant(options.type.every(function (type) {\n    return typeof type === 'string';\n  }), \"Unexpected type option in \" + options.type + \", did you try using a DocumentPicker.types.* that does not exist?\");\n  invariant(options.type.length > 0, '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted');\n  invariant(\n  !options.type.includes('folder'), 'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"');\n  if ('mode' in options && !['import', 'open'].includes((_options$mode = options.mode) !== null && _options$mode !== void 0 ? _options$mode : '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode);\n  }\n  if ('copyTo' in options && !['cachesDirectory', 'documentDirectory'].includes((_options$copyTo = options.copyTo) !== null && _options$copyTo !== void 0 ? _options$copyTo : '')) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo);\n  }\n  return RNDocumentPicker.pick(options);\n}\nexport function releaseSecureAccess(uris) {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve();\n  }\n  invariant(Array.isArray(uris) && uris.every(function (uri) {\n    return typeof uri === 'string';\n  }), \"\\\"uris\\\" should be an array of strings, was \" + uris);\n  return RNDocumentPicker.releaseSecureAccess(uris);\n}\nvar E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED';\nvar E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS';\nexport function isCancel(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED);\n}\nexport function isInProgress(err) {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS);\n}\nfunction isErrorWithCode(err, errorCode) {\n  if (err instanceof Error && 'code' in err) {\n    var nativeModuleErrorInstance = err;\n    return (nativeModuleErrorInstance === null || nativeModuleErrorInstance === void 0 ? void 0 : nativeModuleErrorInstance.code) === errorCode;\n  }\n  return false;\n}\nexport default {\n  isCancel: isCancel,\n  releaseSecureAccess: releaseSecureAccess,\n  pickDirectory: pickDirectory,\n  pick: pick,\n  pickMultiple: pickMultiple,\n  pickSingle: pickSingle,\n  types: types,\n  perPlatformTypes: perPlatformTypes\n};","map":{"version":3,"sources":["index.tsx"],"names":["invariant","perPlatformTypes","types","Platform","OS","RNDocumentPicker","NativeModules","pickDirectory","params","result","pick","mode","allowMultiSelection","type","uri","pickMultiple","opts","options","pickSingle","then","results","allFiles","newOpts","presentationStyle","transitionStyle","Array","isArray","doPick","every","length","includes","TypeError","copyTo","releaseSecureAccess","uris","Promise","resolve","E_DOCUMENT_PICKER_CANCELED","E_DOCUMENT_PICKER_IN_PROGRESS","isCancel","err","isErrorWithCode","isInProgress","errorCode","Error","nativeModuleErrorInstance","code"],"mappings":"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","sourcesContent":["import { Platform, NativeModules, ModalPropsIOS } from 'react-native'\nimport invariant from 'invariant'\nimport type { PlatformTypes, SupportedPlatforms } from './fileTypes'\nimport { perPlatformTypes } from './fileTypes'\n\nexport type DocumentPickerResponse = {\n  uri: string\n  name: string | null\n  copyError?: string\n  fileCopyUri: string | null\n  type: string | null\n  size: number | null\n}\n\nexport const types = perPlatformTypes[Platform.OS]\n\nexport type DirectoryPickerResponse = {\n  uri: string\n}\n\ntype DocumentPickerType = {\n  pick(options: Record<string, any>): Promise<DocumentPickerResponse[]>\n  releaseSecureAccess(uris: string[]): Promise<void>\n  pickDirectory(): Promise<DirectoryPickerResponse>\n}\n\nconst RNDocumentPicker: DocumentPickerType = NativeModules.RNDocumentPicker\n\nexport type TransitionStyle = 'coverVertical' | 'flipHorizontal' | 'crossDissolve' | 'partialCurl'\n\nexport type DocumentPickerOptions<OS extends SupportedPlatforms> = {\n  type?:\n    | string\n    | PlatformTypes[OS][keyof PlatformTypes[OS]]\n    | Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  mode?: 'import' | 'open'\n  copyTo?: 'cachesDirectory' | 'documentDirectory'\n  allowMultiSelection?: boolean\n  transitionStyle?: TransitionStyle\n} & Pick<ModalPropsIOS, 'presentationStyle'>\n\nexport async function pickDirectory<OS extends SupportedPlatforms>(\n  params?: Pick<DocumentPickerOptions<OS>, 'presentationStyle' | 'transitionStyle'>,\n): Promise<DirectoryPickerResponse | null> {\n  if (Platform.OS === 'ios') {\n    const result = await pick({\n      ...params,\n      mode: 'open',\n      allowMultiSelection: false,\n      type: ['public.folder'],\n    })\n    return { uri: result[0].uri }\n  } else {\n    return RNDocumentPicker.pickDirectory()\n  }\n}\n\nexport function pickMultiple<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    ...opts,\n    allowMultiSelection: true,\n  }\n  return pick(options)\n}\nexport function pickSingle<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse> {\n  const options = {\n    ...opts,\n    allowMultiSelection: false,\n  }\n  return pick(options).then((results) => results[0])\n}\n\nexport function pick<OS extends SupportedPlatforms>(\n  opts?: DocumentPickerOptions<OS>,\n): Promise<DocumentPickerResponse[]> {\n  const options = {\n    // must be false to maintain old (v5) behavior\n    allowMultiSelection: false,\n    type: [types.allFiles],\n    ...opts,\n  }\n\n  const newOpts: DoPickParams<OS> = {\n    presentationStyle: 'formSheet',\n    transitionStyle: 'coverVertical',\n    ...options,\n    type: Array.isArray(options.type) ? options.type : [options.type],\n  }\n\n  return doPick(newOpts)\n}\n\ntype DoPickParams<OS extends SupportedPlatforms> = DocumentPickerOptions<OS> & {\n  type: Array<PlatformTypes[OS][keyof PlatformTypes[OS]] | string>\n  allowMultiSelection: boolean\n  presentationStyle: NonNullable<ModalPropsIOS['presentationStyle']>\n  transitionStyle: TransitionStyle\n}\n\nfunction doPick<OS extends SupportedPlatforms>(\n  options: DoPickParams<OS>,\n): Promise<DocumentPickerResponse[]> {\n  invariant(\n    !('filetype' in options),\n    'A `filetype` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n  invariant(\n    !('types' in options),\n    'A `types` option was passed to DocumentPicker.pick, the correct option is `type`',\n  )\n\n  invariant(\n    options.type.every((type: unknown) => typeof type === 'string'),\n    `Unexpected type option in ${options.type}, did you try using a DocumentPicker.types.* that does not exist?`,\n  )\n  invariant(\n    options.type.length > 0,\n    '`type` option should not be an empty array, at least one type must be passed if the `type` option is not omitted',\n  )\n\n  invariant(\n    // @ts-ignore TS2345: Argument of type 'string' is not assignable to parameter of type 'PlatformTypes[OS][keyof PlatformTypes[OS]]'.\n    !options.type.includes('folder'),\n    'RN document picker: \"folder\" option was removed, use \"pickDirectory()\"',\n  )\n\n  if ('mode' in options && !['import', 'open'].includes(options.mode ?? '')) {\n    throw new TypeError('Invalid mode option: ' + options.mode)\n  }\n\n  if (\n    'copyTo' in options &&\n    !['cachesDirectory', 'documentDirectory'].includes(options.copyTo ?? '')\n  ) {\n    throw new TypeError('Invalid copyTo option: ' + options.copyTo)\n  }\n\n  return RNDocumentPicker.pick(options)\n}\n\nexport function releaseSecureAccess(uris: Array<string>): Promise<void> {\n  if (Platform.OS !== 'ios') {\n    return Promise.resolve()\n  }\n\n  invariant(\n    Array.isArray(uris) && uris.every((uri) => typeof uri === 'string'),\n    `\"uris\" should be an array of strings, was ${uris}`,\n  )\n\n  return RNDocumentPicker.releaseSecureAccess(uris)\n}\n\nconst E_DOCUMENT_PICKER_CANCELED = 'DOCUMENT_PICKER_CANCELED'\nconst E_DOCUMENT_PICKER_IN_PROGRESS = 'ASYNC_OP_IN_PROGRESS'\n\nexport type NativeModuleErrorShape = Error & { code?: string }\n\nexport function isCancel(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_CANCELED)\n}\n\nexport function isInProgress(err: unknown): boolean {\n  return isErrorWithCode(err, E_DOCUMENT_PICKER_IN_PROGRESS)\n}\n\nfunction isErrorWithCode(err: unknown, errorCode: string): boolean {\n  if (err instanceof Error && 'code' in err) {\n    const nativeModuleErrorInstance = err as NativeModuleErrorShape\n    return nativeModuleErrorInstance?.code === errorCode\n  }\n  return false\n}\n\nexport default {\n  isCancel,\n  releaseSecureAccess,\n  pickDirectory,\n  pick,\n  pickMultiple,\n  pickSingle,\n  types,\n  perPlatformTypes,\n}\n"]},"metadata":{},"sourceType":"module"}