{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isOpen\", \"onClose\", \"defaultIsOpen\", \"initialFocusRef\", \"finalFocusRef\", \"avoidKeyboard\", \"closeOnOverlayClick\", \"isKeyboardDismissable\", \"overlayVisible\", \"backdropVisible\", \"animationPreset\"],\n  _excluded2 = [\"contentSize\", \"_backdrop\", \"_backdropFade\", \"_fade\", \"_slide\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Backdrop from \"../Backdrop\";\nimport { Slide } from \"../Transitions\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from \"../../../hooks\";\nimport { ModalContext } from \"./Context\";\nimport Box from \"../../primitives/Box\";\nimport { Fade } from \"../../composites/Transitions\";\nimport { useKeyboardBottomInset } from \"../../../utils\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Modal = function Modal(_ref, ref) {\n  var children = _ref.children,\n    isOpen = _ref.isOpen,\n    onClose = _ref.onClose,\n    defaultIsOpen = _ref.defaultIsOpen,\n    initialFocusRef = _ref.initialFocusRef,\n    finalFocusRef = _ref.finalFocusRef,\n    avoidKeyboard = _ref.avoidKeyboard,\n    _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n    closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n    _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n    isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n    _ref$overlayVisible = _ref.overlayVisible,\n    overlayVisible = _ref$overlayVisible === void 0 ? true : _ref$overlayVisible,\n    _ref$backdropVisible = _ref.backdropVisible,\n    backdropVisible = _ref$backdropVisible === void 0 ? true : _ref$backdropVisible,\n    animationPreset = _ref.animationPreset,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var bottomInset = useKeyboardBottomInset();\n  var _usePropsResolution = usePropsResolution('Modal', rest),\n    contentSize = _usePropsResolution.contentSize,\n    _backdrop = _usePropsResolution._backdrop,\n    _backdropFade = _usePropsResolution._backdropFade,\n    _fade = _usePropsResolution._fade,\n    _slide = _usePropsResolution._slide,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _useControllableState = useControllableState({\n      value: isOpen,\n      defaultValue: defaultIsOpen,\n      onChange: function onChange(val) {\n        if (!val) onClose && onClose();\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    visible = _useControllableState2[0],\n    setVisible = _useControllableState2[1];\n  var handleClose = React.useCallback(function () {\n    return setVisible(false);\n  }, [setVisible]);\n  var child = React.createElement(Box, _extends({\n    bottom: avoidKeyboard ? bottomInset + 'px' : undefined\n  }, resolvedProps, {\n    ref: ref\n  }), children);\n  var contextValue = React.useMemo(function () {\n    return {\n      handleClose: handleClose,\n      contentSize: contentSize,\n      initialFocusRef: initialFocusRef,\n      finalFocusRef: finalFocusRef,\n      visible: visible\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return React.createElement(Overlay, {\n    isOpen: visible,\n    onRequestClose: handleClose,\n    isKeyboardDismissable: isKeyboardDismissable,\n    animationPreset: animationPreset,\n    useRNModalOnAndroid: true\n  }, React.createElement(ModalContext.Provider, {\n    value: contextValue\n  }, React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _backdropFade), overlayVisible && backdropVisible && React.createElement(Backdrop, _extends({\n    onPress: function onPress() {\n      closeOnOverlayClick && handleClose();\n    }\n  }, _backdrop))), animationPreset === 'slide' ? React.createElement(Slide, _extends({\n    in: visible\n  }, _slide), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child)) : React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _fade), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child))));\n};\nexport default memo(forwardRef(Modal));","map":{"version":3,"sources":["Modal.tsx"],"names":["React","forwardRef","memo","Backdrop","Slide","FocusScope","useControllableState","usePropsResolution","ModalContext","Box","Fade","useKeyboardBottomInset","Overlay","useHasResponsiveProps","Modal","children","isOpen","onClose","defaultIsOpen","initialFocusRef","finalFocusRef","avoidKeyboard","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","animationPreset","rest","ref","bottomInset","contentSize","_backdrop","_backdropFade","_fade","_slide","resolvedProps","visible","setVisible","value","defaultValue","onChange","val","handleClose","useCallback","child","undefined","contextValue","useMemo","StyleSheet","absoluteFill"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { ModalContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IModalProps } from './types';\nimport { Fade } from '../../composites/Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Modal = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = true,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IModalProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...resolvedProps\n  } = usePropsResolution('Modal', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = React.useCallback(() => setVisible(false), [setVisible]);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...resolvedProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  const contextValue = React.useMemo(() => {\n    return {\n      handleClose,\n      contentSize,\n      initialFocusRef,\n      finalFocusRef,\n      visible,\n    };\n  }, [handleClose, contentSize, initialFocusRef, finalFocusRef, visible]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  // console.log('visible here', visible);\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      animationPreset={animationPreset}\n      useRNModalOnAndroid\n    >\n      <ModalContext.Provider value={contextValue}>\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </ModalContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(Modal));\n"]},"metadata":{},"sourceType":"module"}