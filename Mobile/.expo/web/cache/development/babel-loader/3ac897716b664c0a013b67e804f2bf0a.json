{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isDisabled\", \"onPress\", \"textValue\"],\n  _excluded2 = [\"_text\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport Text from \"../../primitives/Text\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { MenuContext } from \"./MenuContext\";\nimport { useMenuItem } from \"./useMenu\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar MenuItem = function MenuItem(_ref, ref) {\n  var children = _ref.children,\n    isDisabled = _ref.isDisabled,\n    _onPress = _ref.onPress,\n    textValue = _ref.textValue,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _React$useContext = React.useContext(MenuContext),\n    closeOnSelect = _React$useContext.closeOnSelect,\n    onClose = _React$useContext.onClose;\n  var menuItemRef = React.useRef(null);\n  var mergedRef = mergeRefs([menuItemRef, ref]);\n  var _usePropsResolution = usePropsResolution('MenuItem', props, {\n      isDisabled: isDisabled\n    }, {\n      cascadePseudoProps: true\n    }),\n    _text = _usePropsResolution._text,\n    resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    textContent = _React$useState2[0],\n    setTextContent = _React$useState2[1];\n  React.useEffect(function () {\n    var menuItem = menuItemRef.current;\n    if (menuItem) {\n      var _menuItem$textContent;\n      setTextContent(((_menuItem$textContent = menuItem.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : '').trim());\n    }\n  }, [children]);\n  var menuItemProps = useMenuItem({\n    textValue: textValue !== null && textValue !== void 0 ? textValue : textContent,\n    ref: menuItemRef\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Pressable, _extends({}, menuItemProps, resolvedProps, {\n    ref: mergedRef,\n    disabled: isDisabled,\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    onPress: function onPress(e) {\n      if (!isDisabled) {\n        _onPress && _onPress(e);\n        if (closeOnSelect) {\n          onClose && onClose();\n        }\n      }\n    }\n  }), React.createElement(React.Fragment, null, React.Children.map(children, function (child, index) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      return React.createElement(Text, _extends({}, _text, {\n        key: \"menu-item-\".concat(index)\n      }), child);\n    } else {\n      return child;\n    }\n  })));\n};\nexport default memo(forwardRef(MenuItem));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,OAAOC,IAAP;AACA,SAASC,kBAAT;AACA,SAASC,SAAT;AAEA,SAASC,WAAT;AACA,SAASC,WAAT;AACA,SAASC,SAAT;AACA,SAASC,qBAAT;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,OAEZC,GAFe,EAGZ;EAAA,IAFDC,QAAF,QAAEA,QAAF;IAAYC,UAAZ,QAAYA,UAAZ;IAAwBC,QAAxB,QAAwBA,OAAxB;IAAiCC,SAAjC,QAAiCA,SAAjC;IAA+CC;EAG/C,wBAAmChB,KAAK,CAACiB,UAAN,CAAiBX,WAAjB,CAAnC;IAAQY,aAAF,qBAAEA,aAAF;IAAiBC;EACvB,IAAMC,WAAW,GAAGpB,KAAK,CAACqB,MAAN,CAAkB,IAAlB,CAApB;EACA,IAAMC,SAAS,GAAGd,SAAS,CAAC,CAACY,WAAD,EAAcT,GAAd,CAAD,CAA3B;EACA,0BAAoCP,kBAAkB,CACpD,UADoD,EAEpDY,KAFoD,EAGpD;MACEH;IADF,CAHoD,EAMpD;MACEU,kBAAkB,EAAE;IADtB,CANoD,CAAtD;IAAQC,KAAF,uBAAEA,KAAF;IAAYC;EAUlB,sBAAsCzB,KAAK,CAAC0B,QAAN,CAAe,EAAf,CAAtC;IAAA;IAAOC,WAAD;IAAcC,cAAd;EACN5B,KAAK,CAAC6B,SAAN,CAAgB,YAAM;IACpB,IAAMC,QAAQ,GAAGV,WAAW,CAACW,OAA7B;IACA,IAAID,QAAJ,EAAc;MAAA;MACZF,cAAc,CAAC,0BAACE,QAAQ,CAACH,WAAV,yEAAyB,EAAzB,EAA6BK,IAA7B,EAAD,CAAd;IACD;EACF,CALD,EAKG,CAACpB,QAAD,CALH;EAOA,IAAMqB,aAAa,GAAG1B,WAAW,CAAC;IAChCQ,SAAS,EAAEA,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeY,WADQ;IAEhChB,GAAG,EAAES;EAF2B,CAAD,CAAjC;;EAMA,IAAIX,qBAAqB,CAACO,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;EACD,OACEhB,oBAACK,SAAD,eACM4B,aADN,EAEMR,aAFN;IAGEd,GAAG,EAAEW,SAHP;IAIEY,QAAQ,EAAErB,UAJZ;IAKEsB,kBAAkB,EAAE;MAClBD,QAAQ,EAAErB;IADQ,CALtB;IAQEC,OAAO,EAAGsB,kBAAD,EAAY;MACnB,IAAI,CAACvB,UAAL,EAAiB;QACfC,QAAO,IAAIA,QAAO,CAACsB,CAAD,CAAlB;QACA,IAAIlB,aAAJ,EAAmB;UACjBC,OAAO,IAAIA,OAAO,EAAlB;QACD;MACF;IACF;EAfH,IAiBEnB,0CACGA,KAAK,CAACqC,QAAN,CAAeC,GAAf,CAAmB1B,QAAnB,EAA6B,UAAC2B,KAAD,EAAQC,KAAR,EAAuB;IACnD,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;MAC1D,OACEvC,oBAACG,IAAD,eAAUqB,KAAV;QAAiBiB,GAAG,sBAAeD,KAAf;MAApB,IACGD,KADH,CADF;IAKD,CAND,MAMO;MACL,OAAOA,KAAP;IACD;EACF,CAVA,CADH,CAjBF,CADF;AAiCD,CAnED;AAqEA,eAAerC,IAAI,CAACD,UAAU,CAACS,QAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Text","usePropsResolution","Pressable","MenuContext","useMenuItem","mergeRefs","useHasResponsiveProps","MenuItem","ref","children","isDisabled","onPress","textValue","props","useContext","closeOnSelect","onClose","menuItemRef","useRef","mergedRef","cascadePseudoProps","_text","resolvedProps","useState","textContent","setTextContent","useEffect","menuItem","current","trim","menuItemProps","disabled","accessibilityState","e","Children","map","child","index","key"],"sources":["MenuItem.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Pressable } from '../../primitives/Pressable';\nimport type { IMenuItemProps } from './types';\nimport { MenuContext } from './MenuContext';\nimport { useMenuItem } from './useMenu';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst MenuItem = (\n  { children, isDisabled, onPress, textValue, ...props }: IMenuItemProps,\n  ref: any\n) => {\n  const { closeOnSelect, onClose } = React.useContext(MenuContext);\n  const menuItemRef = React.useRef<any>(null);\n  const mergedRef = mergeRefs([menuItemRef, ref]);\n  const { _text, ...resolvedProps } = usePropsResolution(\n    'MenuItem',\n    props,\n    {\n      isDisabled,\n    },\n    {\n      cascadePseudoProps: true,\n    }\n  );\n  const [textContent, setTextContent] = React.useState('');\n  React.useEffect(() => {\n    const menuItem = menuItemRef.current;\n    if (menuItem) {\n      setTextContent((menuItem.textContent ?? '').trim());\n    }\n  }, [children]);\n\n  const menuItemProps = useMenuItem({\n    textValue: textValue ?? textContent,\n    ref: menuItemRef,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      {...menuItemProps}\n      {...resolvedProps}\n      ref={mergedRef}\n      disabled={isDisabled}\n      accessibilityState={{\n        disabled: isDisabled,\n      }}\n      onPress={(e: any) => {\n        if (!isDisabled) {\n          onPress && onPress(e);\n          if (closeOnSelect) {\n            onClose && onClose();\n          }\n        }\n      }}\n    >\n      <>\n        {React.Children.map(children, (child, index: any) => {\n          if (typeof child === 'string' || typeof child === 'number') {\n            return (\n              <Text {..._text} key={`menu-item-${index}`}>\n                {child}\n              </Text>\n            );\n          } else {\n            return child;\n          }\n        })}\n      </>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(MenuItem));\n"]},"metadata":{},"sourceType":"module"}