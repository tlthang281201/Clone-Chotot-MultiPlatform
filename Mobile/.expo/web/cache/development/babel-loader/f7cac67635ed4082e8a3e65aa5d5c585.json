{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onOpen\", \"trigger\", \"onClose\", \"isOpen\", \"children\", \"defaultIsOpen\", \"initialFocusRef\", \"finalFocusRef\", \"trapFocus\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, memo } from 'react';\nimport { Popper } from \"../Popper\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useControllableState } from \"../../../hooks\";\nimport { PopoverContext } from \"./PopoverContext\";\nimport Box from \"../../primitives/Box\";\nimport Backdrop from \"../Backdrop\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from \"../Transitions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar Popover = function Popover(_ref, ref) {\n  var onOpen = _ref.onOpen,\n    trigger = _ref.trigger,\n    onClose = _ref.onClose,\n    isOpenProp = _ref.isOpen,\n    children = _ref.children,\n    defaultIsOpen = _ref.defaultIsOpen,\n    initialFocusRef = _ref.initialFocusRef,\n    finalFocusRef = _ref.finalFocusRef,\n    _ref$trapFocus = _ref.trapFocus,\n    trapFocus = _ref$trapFocus === void 0 ? true : _ref$trapFocus,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var triggerRef = React.useRef(null);\n  var mergedRef = mergeRefs([triggerRef]);\n  var _useControllableState = useControllableState({\n      value: isOpenProp,\n      defaultValue: defaultIsOpen,\n      onChange: function onChange(value) {\n        value ? onOpen && onOpen() : onClose && onClose();\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    isOpen = _useControllableState2[0],\n    setIsOpen = _useControllableState2[1];\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    bodyMounted = _React$useState2[0],\n    setBodyMounted = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    headerMounted = _React$useState4[0],\n    setHeaderMounted = _React$useState4[1];\n  var popoverContentId = \"\".concat(useId(), \"-content\");\n  var headerId = \"\".concat(popoverContentId, \"-header\");\n  var bodyId = \"\".concat(popoverContentId, \"-body\");\n  var handleOpen = React.useCallback(function () {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  var updatedTrigger = function updatedTrigger() {\n    return trigger({\n      'ref': mergedRef,\n      'onPress': handleOpen,\n      'aria-expanded': isOpen ? true : false,\n      'aria-controls': isOpen ? popoverContentId : undefined,\n      'aria-haspopup': true\n    }, {\n      open: isOpen\n    });\n  };\n  var handleClose = function handleClose() {\n    setIsOpen(false);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return React.createElement(Box, {\n    ref: ref\n  }, updatedTrigger(), React.createElement(Overlay, {\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true,\n    unmountOnExit: true\n  }, React.createElement(PresenceTransition, {\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1,\n      transition: {\n        duration: 150\n      }\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.95,\n      transition: {\n        duration: 100\n      }\n    },\n    visible: isOpen,\n    style: StyleSheet.absoluteFill\n  }, React.createElement(Popper, _extends({\n    onClose: handleClose,\n    triggerRef: triggerRef\n  }, props), React.createElement(Backdrop, {\n    onPress: handleClose,\n    bg: \"transparent\"\n  }), React.createElement(PopoverContext.Provider, {\n    value: {\n      onClose: handleClose,\n      initialFocusRef: initialFocusRef,\n      finalFocusRef: finalFocusRef,\n      popoverContentId: popoverContentId,\n      bodyId: bodyId,\n      headerId: headerId,\n      headerMounted: headerMounted,\n      bodyMounted: bodyMounted,\n      setBodyMounted: setBodyMounted,\n      setHeaderMounted: setHeaderMounted,\n      isOpen: isOpen\n    }\n  }, React.createElement(FocusScope, {\n    contain: trapFocus,\n    restoreFocus: true,\n    autoFocus: true\n  }, children))))));\n};\nexport default memo(forwardRef(Popover));","map":{"version":3,"mappings":"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","names":["React","forwardRef","memo","Popper","mergeRefs","useControllableState","PopoverContext","Box","Backdrop","FocusScope","PresenceTransition","useId","Overlay","useHasResponsiveProps","Popover","ref","onOpen","trigger","onClose","isOpenProp","isOpen","children","defaultIsOpen","initialFocusRef","finalFocusRef","trapFocus","props","triggerRef","useRef","mergedRef","value","defaultValue","onChange","setIsOpen","useState","bodyMounted","setBodyMounted","headerMounted","setHeaderMounted","popoverContentId","headerId","bodyId","handleOpen","useCallback","updatedTrigger","undefined","open","handleClose","onRequestClose","useRNModalOnAndroid","unmountOnExit","initial","opacity","animate","transition","duration","exit","scale","visible","style","StyleSheet","absoluteFill","onPress","bg","Provider","contain","restoreFocus","autoFocus"],"sources":["Popover.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { Popper } from '../Popper';\nimport type { IPopoverProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { useControllableState } from '../../../hooks';\nimport { PopoverContext } from './PopoverContext';\nimport Box from '../../primitives/Box';\nimport Backdrop from '../Backdrop';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { PresenceTransition } from '../Transitions';\nimport { StyleSheet } from 'react-native';\nimport { useId } from '@react-aria/utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Popover = (\n  {\n    onOpen,\n    trigger,\n    onClose,\n    isOpen: isOpenProp,\n    children,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    trapFocus = true,\n    ...props\n  }: IPopoverProps,\n  ref: any\n) => {\n  const triggerRef = React.useRef(null);\n  const mergedRef = mergeRefs([triggerRef]);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const [bodyMounted, setBodyMounted] = React.useState(false);\n  const [headerMounted, setHeaderMounted] = React.useState(false);\n\n  const popoverContentId = `${useId()}-content`;\n  const headerId = `${popoverContentId}-header`;\n  const bodyId = `${popoverContentId}-body`;\n\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        'ref': mergedRef,\n        'onPress': handleOpen,\n        'aria-expanded': isOpen ? true : false,\n        'aria-controls': isOpen ? popoverContentId : undefined,\n        'aria-haspopup': true,\n      },\n      { open: isOpen }\n    );\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box ref={ref}>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        unmountOnExit\n      >\n        <PresenceTransition\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1, transition: { duration: 150 } }}\n          exit={{ opacity: 0, scale: 0.95, transition: { duration: 100 } }}\n          visible={isOpen}\n          style={StyleSheet.absoluteFill}\n        >\n          <Popper onClose={handleClose} triggerRef={triggerRef} {...props}>\n            <Backdrop onPress={handleClose} bg=\"transparent\" />\n            <PopoverContext.Provider\n              value={{\n                onClose: handleClose,\n                initialFocusRef,\n                finalFocusRef,\n                popoverContentId,\n                bodyId,\n                headerId,\n                headerMounted,\n                bodyMounted,\n                setBodyMounted,\n                setHeaderMounted,\n                isOpen,\n              }}\n            >\n              <FocusScope contain={trapFocus} restoreFocus autoFocus>\n                {children}\n              </FocusScope>\n            </PopoverContext.Provider>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Popover));\n"]},"metadata":{},"sourceType":"module"}